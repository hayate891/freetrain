<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgateLib</name>
    </assembly>
    <members>
        <member name="T:ERY.AgateLib.ImageFileFormat">
            <summary>
            Enum which is used to indicate what format an image file is in.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ImageFileFormat.Png">
            <summary>
            Portable Network Graphics (PNG) format.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ImageFileFormat.Bmp">
            <summary>
            Windows Bitmap (BMP) format.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ImageFileFormat.Jpg">
            <summary>
            Jpeg format.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ImageFileFormat.Tga">
            <summary>
            Targa format.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Surface">
            <summary>
            Class which represents a pixel surface.
            There are several ways to create a Surface object.  The most common
            is to pass the name of an image file.
            
            Using a surface to draw on the screen is very simple.  There are
            several overloaded Draw methods which do that.
            
            You must have created a DisplayWindow object before creating any 
            Surface objects.
            <example>
            C# Example to create a new surface from an image file:
            <code>
                Surface surface = new Surface("myimage.png");
            </code>
            VB Example to create a new surface from an image file:
            <code>
                Dim surf as New Surface("myimage.png")
            </code>
            
            C# Example to draw surface to screen.
            <code>
                surface.Draw(20, 20);
            </code>
            VB Example to draw surface to screen.
            <code>
                surf.Draw(20, 20)
            </code>
            </example>
            </summary>
        </member>
        <member name="T:ERY.AgateLib.IRenderTarget">
            <summary>
            Defines the interface used for render targets.
            Implemented by DisplayWindow and Surface
            </summary>
        </member>
        <member name="P:ERY.AgateLib.IRenderTarget.Impl">
            <summary>
            Gets the library implementation of the render target.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.IRenderTarget.Width">
            <summary>
            Gets the width of the render target in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.IRenderTarget.Height">
            <summary>
            Gets the height of the render target in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.IRenderTarget.Size">
            <summary>
            Gets the size of the render target in pixels.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.IRenderTarget.Resize">
            <summary>
            Event that is fired when the render target is resized.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Surface.#ctor(System.String)">
            <summary>
            Creates a surface object, from the specified image file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a surface object of the specified size.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.#ctor(ERY.AgateLib.Geometry.Size)">
            <summary>
            Creates a surface object of the specified size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.#ctor(ERY.AgateLib.PixelBuffer)">
            <summary>
            Constructs a surface object from the specified PixelBuffer object.
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.#ctor(ERY.AgateLib.ImplBase.SurfaceImpl)">
            <summary>
            Creates a surface object and to be ready to attach to an implemented object.
            Throws an Exception if there is a passed impl.
            (This is not intended for use by applications).
            </summary>
            <param name="fromImpl"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Dispose">
            <summary>
            Destroyes unmanaged resources associated with this surface.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Surface.SetScale(System.Double,System.Double)">
            <summary>
            Sets the amount of scaling when this surface is drawn.  
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the amount of scaling when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle of this surface.
            </summary>
            <param name="radians">Value in radians to increase the rotation by.</param>
        </member>
        <member name="M:ERY.AgateLib.Surface.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle of this surface.  Value supplied is in degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.IsSurfaceBlank">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the value of the AlphaThreshold of the
            display object..
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.IsSurfaceBlank(System.Int32)">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the given value.
            </summary>
            <param name="alphaThreshold">The alpha value below which to consider 
            a pixel blank.  In the range 0 &lt;= alphaThreshold &lt;= 255.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.IsRowBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given row are all
            transparent, within the threshold.
            </summary>
            <param name="row">Which row.  Valid range is between 0 and SurfaceSize.Height - 1.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.IsColumnBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given column are all
            transparent, within the threshold.
            </summary>
            <param name="col">Which column.  Valid range is between 0 and SurfaceSize.Width - 1.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw">
            <summary>
            Draws the surface to the top-left corner (0, 0) of the
            target.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(System.Int32,System.Int32)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(System.Single,System.Single)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(ERY.AgateLib.Geometry.Point)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(ERY.AgateLib.Geometry.PointF,ERY.AgateLib.Geometry.PointF)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            Ignores the value of RotationCenter and uses the specified
            point to rotate around instead.  
            </summary>
            <param name="destPt"></param>
            <param name="rotationCenter">Center of rotation to use, relative
            to the top-left of the surface.</param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            Ignores the value of RotationCenter and uses the specified
            point to rotate around instead.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Draws a portion of this surface to the specified destination
            rectangle.  
            
            State settings which are ignored are RotationAngle,
            DisplayAlignment and Scaling.  Color and alpha values
            are still used.
            </summary>
            <param name="srcRect"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.Draw(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Draws this surface to the specified destination
            rectangle.  
            
            State settings which are ignored are RotationAngle,
            DisplayAlignment and Scaling.  Color and alpha values
            are still used.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.DrawRects(ERY.AgateLib.Geometry.Rectangle[],ERY.AgateLib.Geometry.Rectangle[])">
            <summary>
            Draws the surface using an array of source and destination rectangles.
            This method will throw an exception if the two arrays are not the same size.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.SaveTo(System.String)">
            <summary>
            Saves the surface to the specified file.
            
            Infers the file format from the extension.  If there
            is no extension present or it is unrecognized, PNG is
            assumed.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.SaveTo(System.String,ERY.AgateLib.ImageFileFormat)">
            <summary>
            Saves the surface to the specified file, with the specified
            file format.  If the file has an extension such as ".png" or
            ".bmp" than the SaveTo(string) overload is prefered, as it
            chooses a file format which is consistent with the extension.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.CarveSubSurface(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Copies the pixels in this surface from the given source rectangle 
            to a new surface, and returns that.
            It is not recommended to call this between calls to 
            Display.BeginFrame..Display.EndFrame.
            </summary>
            <param name="srcRect">The rectangle of pixels to create a new surface from.</param>
            <returns>A Surface object containing only those pixels copied.</returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.SetSourceSurface(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Used by the BuildPackedSurface 
            </summary>
            <param name="surf"></param>
            <param name="srcRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.ReadPixels">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface. 
            The format of the pixel data is the same as of the raw data in the surface. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.ReadPixels(ERY.AgateLib.PixelFormat)">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface. 
            </summary>
            <param name="format">Format of the pixel data wanted.  Automatic conversion is
            performed, if necessary.  Use PixelFormat.Any to retrieve data in its original format,
            without conversion.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.ReadPixels(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface,
            inside the rectangle requested.
            </summary>
            <param name="format">Format of the pixel data wanted.  Automatic conversion is
            performed, if necessary.  Use PixelFormat.Any to retrieve data in its original format,
            without conversion.</param>
            <param name="rect">Area of the Surface from which to retrieve data.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Surface.WritePixels(ERY.AgateLib.PixelBuffer)">
            <summary>
            Copies the data directly from PixelBuffer. The PixelBuffer must be the same width 
            and height as the Surface's SurfaceWidth and SurfaceHeight.
            </summary>
            <param name="buffer">The PixelBuffer which contains pixel data to copy from.</param>
        </member>
        <member name="M:ERY.AgateLib.Surface.WritePixels(ERY.AgateLib.PixelBuffer,ERY.AgateLib.Geometry.Point)">
            <summary>
            Copies the data directly from PixelBuffer, overwriting a portion of the surface's 
            pixel data.  The PixelBuffer must fit within the surface.
            </summary>
            <param name="buffer">The PixelBuffer which contains pixel data to copy from.</param>
            <param name="startPoint"></param>
        </member>
        <member name="M:ERY.AgateLib.Surface.FormatFromExtension(System.String)">
            <summary>
            Returns a value in the ImageFileFormat enum based on the file
            extension of the given filename.  No checks are done to see
            if that file exists.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Surface.IsDisposed">
            <summary>
            Returns true if Dispose() has been called on this surface.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.TesselateFactor">
            <summary>
            Gets or sets how many times this surface should be broken down
            when drawn.  A TesselateFactor of 2 indicates that each time
            this surface is drawn, it's drawn in 4 (2x2) chunks.
            </summary>
            <remarks>
            This property is used to divide a surface drawn up into smaller
            surfaces which are drawn independently.  The reason to do this is
            lighting calculations (without using shaders) are done on a per-vertex 
            basis.  When a light source is close to a large surface, this will create
            noticably bad lighting, because only the lighting properties at the 
            corners are calculated, and then the lighting is interpolated between
            the end points.
            <para>
            Setting this value high may have a significant impact on performance.
            For each time a Surface.Draw() overload is called, the number of triangles
            which are calculated and sent to the rasterizer is 2 * TesselateFactor<sup>2</sup>.
            </para>
            </remarks>
            
        </member>
        <member name="P:ERY.AgateLib.Surface.ShouldBePacked">
            <summary>
            Gets or sets a bool value that indicates whether or not this surface
            should be included in a call to Display.PackAllSurfaces.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.SurfaceWidth">
            <summary>
            Gets the width of the source surface in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.SurfaceHeight">
            <summary>
            Gets the height of the source surface in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.SurfaceSize">
            <summary>
            Gets the Size of the source surface in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.DisplayWidth">
            <summary>
            Get or sets the width of the surface in pixels when it will be displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.DisplayHeight">
            <summary>
            Gets or sets the height of the surface in pixels when it is displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.DisplaySize">
            <summary>
            Gets or sets the Size of the area used by this surface when displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.Alpha">
            <summary>
            Alpha value for displaying this surface.
            Valid values range from 0.0 (completely transparent) to 1.0 (completely opaque).
            Internally stored as a byte, so granularity is only 1/255.0.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.RotationCenter">
            <summary>
            Gets or sets the point on the surface which is used to rotate around.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.DisplayAlignment">
            <summary>
            Gets or sets the point where the surface is aligned to when drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when this surface is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.Color">
            <summary>
            Gets or sets the multiplicative color for this surface.
            Remember, Color structures have an alpha field, so setting
            this will override any value set by Alpha.  If you want to
            set Alpha separately, set the Alpha property after the 
            SurfaceColor property.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Surface.Impl">
            <summary>
            Gets the object which does actual rendering of this surface.
            This may be cast to a surface object in whatever rendering library
            is being used (eg. if using the MDX_1_1 library, this can be cast
            to an MDX1_Surface object).  You only need to use this if you
            want to access features which are specific to the graphics library
            you're using.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.PointF">
            <summary>
            Replacement for System.Drawing.PointF structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.#ctor(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.#ctor(ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.#ctor(System.Drawing.PointF)">
            <summary>
            Constructs a PointF object.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.op_Equality(ERY.AgateLib.Geometry.PointF,ERY.AgateLib.Geometry.PointF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.op_Inequality(ERY.AgateLib.Geometry.PointF,ERY.AgateLib.Geometry.PointF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.ToString">
            <summary>
            Creates a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.Equals(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.Geometry.PointF.Empty">
            <summary>
            Empty PointF.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.PointF.Add(ERY.AgateLib.Geometry.PointF,ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Adds the specified SizeF structure to the specified PointF structure
            and returns the result as a new PointF structure.
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.PointF.X">
            <summary>
            Gets or sets the X value.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.PointF.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.PointF.IsEmpty">
            <summary>
            Returns true if X and Y are zero.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.Point">
            <summary>
            Replacement for System.Drawing.Point structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.#ctor(ERY.AgateLib.Geometry.Point)">
            <summary>
            Constructs a point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.#ctor(ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a point.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.#ctor(System.Drawing.Point)">
            <summary>
            Constructs a point.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.op_Equality(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.op_Inequality(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.GetHashCode">
            <summary>
            Gets a hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.ToString">
            <summary>
            Creates a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.Equals(ERY.AgateLib.Geometry.Point)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.Geometry.Point.Empty">
            <summary>
            Empty point.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.Add(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size)">
            <summary>
            Adds the specified size object to the specified point object
            and returns the new point.
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.Ceiling(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Rounds the PointF object up.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.Round(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Rounds the PointF object to the nearest integer.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Point.op_Explicit(ERY.AgateLib.Geometry.Point)~System.Drawing.Point">
            <summary>
            Explicit conversion to System.Drawing.Point object.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Point.X">
            <summary>
            Gets or sets the X value.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Point.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Point.IsEmpty">
            <summary>
            Returns true if X and Y are zero.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PlatformSpecific.Win32Platform">
            <summary>
            Contains Win32 platform specific methods.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PlatformSpecific.Platform">
            <summary>
            This class encapsulates methods which much be implemented for
            each platform given.  It provides default implementations that 
            are "most conservative."
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Platform.#ctor">
            <summary>
            Only sub classes are allowed to initialized this class.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Platform.CreatePlatformMethods">
            <summary>
            Creates an object which encapsulates platform specific methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Platform.Dispose">
            <summary>
            Dipsoses of the platform-specific methods.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Platform.GetTime">
            <summary>
            Returns the current time in milliseconds.
            This may be the amount of time since the application began, the system started,
            or any other zero-point.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.PlatformSpecific.Platform.IsAppIdle">
            <summary>
            Returns true if the application is idle, so DoEvents does
            not need to be called.
            
            If there is no platform-specific implementation, this
            just returns false always.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Win32Platform.PeekMessage(ERY.AgateLib.PlatformSpecific.Win32Platform.Message@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            PeekMessage checks to see if there are messages waiting.
            </summary>
            <param name="msg"></param>
            <param name="hWnd"></param>
            <param name="messageFilterMin"></param>
            <param name="messageFilterMax"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Win32Platform.QueryPerformanceCounter(System.Int64@)">
            <summary>
            QueryPerformanceCounter gets the performance counter.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Win32Platform.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            Gets the performance frequency
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Win32Platform.#ctor">
            <summary>
            Initializes Win32 specific methods.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.Win32Platform.GetTime">
            <summary>
            Gets the time in milliseconds, using QueryPerformanceCounter
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.PlatformSpecific.Win32Platform.IsAppIdle">
            <summary>
            Returns true if there are no messages waiting.
            This allows us to avoid an expensive Application.DoEvents() call.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PlatformSpecific.Win32Platform.Message">
            <summary>
            Window Message structuer
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Light">
            <summary>
            Class which represents a single light source.
            Only point light sources are supported at the moment.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)">
            <summary>
            Sets the three constants in the attenuation model.  See remarks for details.
            </summary>
            <remarks>
            Lights decrease in intensity for objects which are farther away from the lights.
            This is called attenuation.
            Point Lights are attenuated according to the following formula:
            <para>
            K = C<sub>0</sub> + C<sub>1</sub>*d + C<sub>2</sub>*d<sup>2</sup>
            </para>
            <para>
            A = 1 / K
            </para>
            where d is the distance from the light the object being rendered is.  The Light's
            color components are multiplied by A to decrease the intensity of the light on this
            object.
            </remarks>
            <param name="constant"></param>
            <param name="linear"></param>
            <param name="quadratic"></param>
        </member>
        <member name="P:ERY.AgateLib.Light.AttenuationConstant">
            <summary>
            The constant value in the Lighting formula
            <seealso cref="M:ERY.AgateLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.AttenuationLinear">
            <summary>
            The linear value in the Lighting formula
            <seealso cref="M:ERY.AgateLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.AttenuationQuadratic">
            <summary>
            The quadratic value in the Lighting formula
            <seealso cref="M:ERY.AgateLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Range">
            <summary>
            Gets or sets the distance at which the rendering API can consider the light
            too far away to have any affect.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Enabled">
            <summary>
            Gets or sets whether or not this Light should have any effect on anything which is rendered.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Ambient">
            <summary>
            Ambient color for the light.  Ambient color is not affected by the dot product with the
            normal, so it appears to attenuate slower.
            <seealso cref="P:ERY.AgateLib.Light.Diffuse"/>
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Diffuse">
            <summary>
            Diffuse color for the light.  The diffuse color is modulated by the dot product of the
            direction to the light with the surface normal (for 2D drawing in AgateLib, surface normals
            are always in the negative z direction).  So it attenuates faster than the Ambient color does.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Specular">
            <summary>
            Specular highlight color, or "shininess."  Not currently used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Light.Position">
            <summary>
            The position of the Light source, in 3D space.  Normals in AgateLib are in the negative
            z direction, so it is recommended to make Position.Z a negative number.  How negative
            depends on the Attenuation model and what kind of effect you wish to create with the
            lighting.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.BitmapFontImpl">
            <summary>
            Provides a basic implementation for the use of non-system fonts provided
            as a bitmap.
            
            To construct a bitmap font, call the appropriate static FontSurface method.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.FontSurfaceImpl">
            <summary>
            Implements a FontSurface
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.StringDisplayWidth(System.String)">
            <summary>
            Measures the width of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.StringDisplayHeight(System.String)">
            <summary>
            Measures the height of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.StringDisplaySize(System.String)">
            <summary>
            Measures the size of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.DrawText(ERY.AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.DrawText(ERY.AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.SetScale(System.Double,System.Double)">
            <summary>
            Sets ScaleWidth and ScaleHeight.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets ScaleWidth and ScaleHeight.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.FontSurfaceImpl.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.FontSurfaceImpl.DisplayAlignment">
            <summary>
            Sets how to interpret the point given to DrawText methods.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.FontSurfaceImpl.Color">
            <summary>
            Sets the color of the text to be drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.FontSurfaceImpl.Alpha">
            <summary>
            Sets the alpha value of the text to be drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.FontSurfaceImpl.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.FontSurfaceImpl.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ImplBase.BitmapFontImpl.mSrcRects">
            <summary>
            Stores source rectangles for all characters.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.#ctor(System.String,ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a BitmapFontImpl, assuming the characters in the given file
            are all the same size, and are in their ASCII order.
            </summary>
            <param name="filename"></param>
            <param name="characterSize"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.#ctor(ERY.AgateLib.Surface,System.Collections.Generic.IDictionary{System.Char,ERY.AgateLib.Geometry.RectangleF})">
            <summary>
            Constructs a BitmapFontImpl, taking the passed surface as the source for
            the characters.  The source rectangles for each character are passed in.
            </summary>
            <param name="surface">Surface which contains the image data for the font glyphs.</param>
            <param name="srcRects">An object implementing the IDictionary&lt;char, Rectangle&gt;
            interface, containing the source rectangles on the surface for each font glyph.</param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.FromOSFont(System.String,System.Single,ERY.AgateLib.FontStyle)">
            <summary>
            Creates a bitmap font by loading an OS font, and drawing it to 
            a bitmap to use as a Surface object.  You should only use this method
            if writing a driver.
            </summary>
            <seealso cref="M:ERY.AgateLib.FontSurface.BitmapFont(System.String,System.Single,ERY.AgateLib.FontStyle)"/>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.StringDisplayWidth(System.String)">
            <summary>
            Measures the width of the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.StringDisplayHeight(System.String)">
            <summary>
            Measures the height of the text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.StringDisplaySize(System.String)">
            <summary>
            Measures the size of the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.DrawText(ERY.AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.BitmapFontImpl.DrawText(ERY.AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.BitmapFontImpl.Color">
            <summary>
            Overrides the base Color method to catch color changes to set them on the surface.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.DriverInfo`1">
            <summary>
            Class which describes what's required to instantiate a driver.
            </summary>
            <typeparam name="T">Type parameter which derives from DriverTypeIDBase.
            </typeparam>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfo`1.#ctor">
            <summary>
            Constructs a DriverInfo&lt;T&gt; object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfo`1.#ctor(System.Type,`0)">
            <summary>
            Constructs a DriverInfo&lt;T&gt; object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfo`1.#ctor(System.Type,`0,System.String)">
            <summary>
            Constructs a DriverInfo&lt;T&gt; object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfo`1.#ctor(System.Type,`0,System.String,System.Int32)">
            <summary>
            Constructs a DriverInfo&lt;T&gt; object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfo`1.ToString">
            <summary>
            Returns the name of this driver.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DriverInfo`1.TypeID">
            <summary>
            Gets or sets the driver type identifier.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DriverInfo`1.MyClass">
            <summary>
            Type which should be instantiated to use the driver.
            This type must derive from a class deriving from DriverImplBase.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DriverInfo`1.Name">
            <summary>
            Name of the class to display to the user if asked to do so.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DriverInfo`1.Priority">
            <summary>
            Drivers which are registered are sorted by priority, and the 
            highest priority is selected and used under usual conditions. 
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.SurfacePacker">
            <summary>
            Class which handles packing of surfaces into a large surface.
            
            This class was introduced to allow render state changes to be minimized
            by making everything use the same texture object in memory.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.ClearQueue">
            <summary>
            Clears the list of surfaces that should be packed.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.QueueSurface(ERY.AgateLib.Surface)">
            <summary>
            Adds a surface to the list of surfaces that should be packed.
            </summary>
            <param name="surf"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.PackQueue">
            <summary>
            Packs all the surfaces in the list.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.SurfacePacker.RectHolder`1">
            <summary>
            Holds a destination rectangle and object to go in it.
            </summary>
            <typeparam name="T">Type of object to put in rectangle.</typeparam>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectHolder`1.CompareTo(ERY.AgateLib.Utility.SurfacePacker.RectHolder{`0})">
            <summary>
            Compares two RectHolder objects for sorting purposes.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Utility.SurfacePacker.RectHolder`1.Rect">
            <summary>
            Gets or sets the destination rectangle.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.SurfacePacker.RectHolder`1.Tag">
            <summary>
            Gets or sets the object.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1">
            <summary>
            Class which takes a bunch of rectangles and organizes them to 
            all fit within a large rectangle.
            </summary>
            <typeparam name="T">The type of objects which will be added to the rectangles.
            This is so that the RectPacker can keep track of which rectangles go with
            which objects.</typeparam>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.#ctor(ERY.AgateLib.Geometry.Size)">
            <summary>
            Creates a RectPacker object of the specified size.
            </summary>
            <param name="containerSize"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.AddRect(ERY.AgateLib.Geometry.Rectangle,`0)">
            <summary>
            Adds a used rectangle to the RectPacker.
            This throws an exception if pixels in the rectangle specified 
            are already used.
            </summary>
            <param name="rect"></param>
            <param name="tag"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.FindEmptySpace(ERY.AgateLib.Geometry.Size,ERY.AgateLib.Geometry.Rectangle@)">
            <summary>
            Finds an empty space of the specified size.
            
            Returns true if there was an empty space of that size available.
            </summary>
            <param name="size"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.QueueObject(ERY.AgateLib.Geometry.Size,`0)">
            <summary>
            Adds an object of the specified size to the queue.
            </summary>
            <param name="size"></param>
            <param name="tag"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.ClearQueue">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.AddQueue">
            <summary>
            Packs all the objects in the queue to the container.
            Sorts them first, to optimize coverage.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.UnusuedQueueObjects">
            <summary>
            Returns a collection of all objects in the queue which have
            not been added to the container rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.GetEnumerator">
            <summary>
            Enumerates through the packed rectangles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.ContainerSize">
            <summary>
            Gets or sets the size of the container to fit all the
            rects into.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.SurfacePacker.RectPacker`1.PixelsUsedPercentage">
            <summary>
            Returns what percentage of the container is used up.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.SurfacePacker.PackedSurface">
            <summary>
            Class which creates the final packed surface.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SurfacePacker.PackedSurface.#ctor(ERY.AgateLib.Geometry.Size)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:ERY.AgateLib.Utility.SurfacePacker.PackedSurface.RectPacker">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.AudioImpl">
            <summary>
            Implements Audio class factory.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.DriverImplBase">
            <summary>
            Base class all driver classes should implement.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DriverImplBase.Initialize">
            <summary>
            Initialization beyond what the constructor does.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DriverImplBase.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DriverImplBase.Report(System.String)">
            <summary>
            Called by drivers in their Initialize routine to report
            which driver was instantiated.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.AudioImpl.CreateSoundBuffer(System.String)">
            <summary>
            Creates a SoundBufferImpl object.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.AudioImpl.CreateMusic(System.String)">
            <summary>
            Creates a MusicImpl object.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.AudioImpl.CreateSoundBufferSession(ERY.AgateLib.ImplBase.SoundBufferImpl)">
            <summary>
            Creates a SoundBufferSessionImpl object.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.AudioImpl.Update">
            <summary>
            This function is called once a frame to allow the Audio driver to update
            information.  There is no need to call base.Update() if overriding this
            function.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.SoundBufferImpl">
            <summary>
            Implements a SoundBuffer
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SoundBufferImpl.Dispose">
            <summary>
            Destroys unmanaged resources.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SoundBufferImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.SoundBufferSessionImpl">
            <summary>
            Represents a playback instance.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.Dispose">
            <summary>
            Destroyes unmanaged resources.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.Play">
            <summary>
            Starts at the beginning.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.Stop">
            <summary>
            Stops.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.Pan">
            <summary>
            Gets or sets the left-right balance.
            -1 is left speaker
            0 is middle (both)
            1 is right.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SoundBufferSessionImpl.IsPlaying">
            <summary>
            Gets whether or not this playback instance is actually playing.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.MusicImpl">
            <summary>
            Class which implements a Music object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.MusicImpl.OnSetLoop(System.Boolean)">
            <summary>
            Function called when IsLooping is set to a new value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.MusicImpl.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.MusicImpl.Play">
            <summary>
            Start over at beginning.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.MusicImpl.Stop">
            <summary>
            Stop playing.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.MusicImpl.IsLooping">
            <summary>
            Gets or sets whether or not this Music is looping.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.MusicImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.MusicImpl.Pan">
            <summary>
            Gets or sets the left-right balance.  This may or may not be supported
            by some drivers.
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            
            If this is unsupported by the driver, don't allow impl.Pan to change from zero.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.MusicImpl.IsPlaying">
            <summary>
            Gets whether or not it's currently playing.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Resources.Resource">
            <summary>
            Class similar to ClanLib's CL_Resource class.
            Needs lots of work.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.#ctor(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.HasAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetStringAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetIntAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetDoubleAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetPointAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetSizeAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetSubElements(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Resources.Resource.GetFirstSubElement(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.Geometry.SizeF">
            <summary>
            SizeF structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.#ctor(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Constructs a SizeF structure.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.#ctor(System.Drawing.SizeF)">
            <summary>
            Constructs a SizeF structure.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a SizeF structure.
            </summary>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="F:ERY.AgateLib.Geometry.SizeF.Empty">
            <summary>
            Empty SizeF structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.op_Equality(ERY.AgateLib.Geometry.SizeF,ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.op_Inequality(ERY.AgateLib.Geometry.SizeF,ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.SizeF.Equals(ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.SizeF.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.SizeF.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.SizeF.IsEmpty">
            <summary>
            True if width and height are zero.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.RectangleF">
            <summary>
            Replacement for System.Drawing.RectangleF structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a RectangleF.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.#ctor(ERY.AgateLib.Geometry.PointF,ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Construts a RectangleF.
            </summary>
            <param name="pt"></param>
            <param name="sz"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.#ctor(System.Drawing.RectangleF)">
            <summary>
            Constructs a RectangleF.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="rect"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Static method which returns a RectangleF with specified left, top, right and bottom.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if the RectangleF contains the specified PointF.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Contains(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Returns true if the RectangleF contains the specified PointF.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Contains(ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Returns true if the RectangleF entirely contains the specified RectangleF.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.op_Equality(ERY.AgateLib.Geometry.RectangleF,ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.op_Inequality(ERY.AgateLib.Geometry.RectangleF,ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.ToString">
            <summary>
            Creates a string representing this RectangleF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Equals(ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.IntersectsWith(ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Returns true if this intersects another RectangleF.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.Geometry.RectangleF.Empty">
            <summary>
            Empty RectangleF
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.Intersect(ERY.AgateLib.Geometry.RectangleF,ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Static method returning the intersection of two RectangleFs.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.RectangleF.op_Explicit(ERY.AgateLib.Geometry.RectangleF)~System.Drawing.RectangleF">
            <summary>
            For inter-op with System.Drawing.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Y">
            <summary>
            Y value
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Bottom">
            <summary>
            Gets bottom.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Left">
            <summary>
            Gets left.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Top">
            <summary>
            Gets top.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Right">
            <summary>
            Gets right.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Location">
            <summary>
            Gets or sets top-left PointF.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.Size">
            <summary>
            Gets or sets SizeF.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.RectangleF.IsEmpty">
            <summary>
            True if this is (0,0,0,0).
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.IRenderTargetImpl">
            <summary>
            Defines the interface used for render targets.
            SurfaceImpl and DisplayWindowImpl implement this interface.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.IRenderTargetImpl.BeginRender">
            <summary>
            Utility functions that can be called by the rendering system
            when rendering starts and ends.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.IRenderTargetImpl.EndRender">
            <summary>
            Utility functions that can be called by the rendering system
            when rendering starts and ends.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IRenderTargetImpl.Size">
            <summary>
            Gets the Size of the render target, in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IRenderTargetImpl.Width">
            <summary>
            Gets the Height of the render target, in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IRenderTargetImpl.Height">
            <summary>
            Gets the Width of the render target, in pixels.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.InputImpl">
            <summary>
            Implementation for Input Manager.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.InputImpl.CountJoysticks">
            <summary>
            Polls and counts joysticks
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.InputImpl.CreateJoysticks">
            <summary>
            Creates joystick impls.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.Audio">
            <summary>
            Static class which contains basic functions for playing sound and music.
            This is analogous to the static Display class, but playing audio files
            is much less complicated.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Audio.Initialize(ERY.AgateLib.Drivers.AudioTypeID)">
            <summary>
            Initializes the audio system by instantiating the driver with the given
            AudioTypeID.  The audio driver must be registered with the Registrar
            class.
            </summary>
            <param name="audioType"></param>
        </member>
        <member name="M:ERY.AgateLib.Audio.Dispose">
            <summary>
            Disposes of the audio driver.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Audio.StopAll">
            <summary>
            Stops all sound and music currently playing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Audio.StopAllSounds">
            <summary>
            Stops all sound effects playing.  Music objects will continue playing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Audio.StopAllMusic">
            <summary>
            Stops all music currently playing.  Sound objects will continue playing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Audio.TransformByLog(System.Double)">
            <summary>
            This is for use by drivers whose underlying technology does not provide
            a volume control which sounds linear.
            
            Transforms the input in the range 0 to 1 by a logarithm into the
            range of 0 to 1.  
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Audio.TransformByExp(System.Double)">
            <summary>
            This is for use by drivers whose underlying technology does not provide
            a volume control which sounds linear.
            
            Transforms the input in the range 0 to 1 by an exponential into the
            range of 0 to 1.  
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Audio.Update">
            <summary>
            Updates audio information.  There is no need to call this explicitly
            if you are calling Core.KeepAlive on a regular basis.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Audio.Impl">
            <summary>
            Gets the object which handles all of the actual calls to Audio functions.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Audio.DisposeAudio">
            <summary>
            Event that is called when Display.Dispose() is invoked, to shut down the
            display system and release all resources.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Audio.AudioCoreEventDelegate">
            <summary>
            Delegate type for events which are raised by this class.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.SoundBuffer">
            <summary>
            A class which is used for loading and playing of sounds.
            Typically this is used for sound effects, whereas playing background music
            is done by the Music class.
            
            The SoundBuffer class supports playing the same sound multiple times; this
            is done through the creation of SoundBufferSession objects for each time
            the SoundBuffer is played.  
            
            SoundBufferSession objects may be recycled, to cut down on the amount of
            new calls.  
            
            This class should support loading of .wav files, at the very least.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.SoundBuffer.mSessions">
            <summary>
            A list of existing SoundBufferSession objects.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.#ctor(System.String)">
            <summary>
            Constructs a SoundBuffer object, loading audio data from the 
            specified file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.Finalize">
            <summary>
            Destroys a SoundBuffer object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.Dispose">
            <summary>
            Disposes of the SoundBuffer object, and all SoundBufferSession objects
            created by this SoundBuffer.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.CreateSession">
            <summary>
            Creates a SoundBufferSession object, for playing of this
            buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.Play">
            <summary>
            Creates a SoundBufferSession object and starts it playing.
            You can ignore the return value of this function if you just
            want simple playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.NewSoundBufferSession">
            <summary>
            Creates a new SoundBufferSession object, or finds one which
            can be recycled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SoundBuffer.Stop">
            <summary>
            Stops all SoundBufferSession objects created from this sound.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBuffer.Impl">
            <summary>
            Returns the implemented object.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.SoundBuffer.StopEvent">
            <summary>
            Event which occurs when Stop is called on the SoundBuffer object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBuffer.Filename">
            <summary>
            Filename this sound was originally loaded from.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBuffer.Volume">
            <summary>
            Gets or sets the default volume that will be used in new sessions. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBuffer.Pan">
            <summary>
            Gets or sets the left-right balance that will be used in new sessions. 
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBuffer.IsPlaying">
            <summary>
            Returns true if any SoundBufferSession objects are playing.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.SoundBufferSession">
            <summary>
            A class which represents a playback instance of a SoundBuffer object.
            
            After a SoundBufferSession is done playing, it may be recycled if its
            parent SoundBuffer object's Play or CreateSession methods are called.
            This behavior can be suppressed by setting the Recycle property to false.
            If you do this, you are responsible for freeing the unmanaged resources
            on the SoundBufferSession by calling its Dispose method.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBufferSession.Finalize">
            <summary>
            Destroyes a SoundBufferSession object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBufferSession.Dispose">
            <summary>
            Destroys the unmanaged resources associated with this object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBufferSession.Play">
            <summary>
            Begins playback of the SoundBufferSession object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SoundBufferSession.Stop">
            <summary>
            Stops playback.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.Impl">
            <summary>
            Returns the implemented object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.Source">
            <summary>
            Returns the SoundBuffer object which created this SoundBufferSession.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.Volume">
            <summary>
            Gets or sets the volume. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.Pan">
            <summary>
            Gets or sets the left-right balance.  
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.IsPlaying">
            <summary>
            Returns true if this Session is playing.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SoundBufferSession.Recycle">
            <summary>
            Gets or sets a bool value which indicates whether or not this
            SoundBufferSession object should be recycled when it is done playing.
            
            If you set this to false, you should Dispose the SoundBufferSession
            object yourself when you're done with it.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Music">
            <summary>
            A class which performs Music playback.
            
            This class should support loading of .ogg and .mid files, at the very least.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Music.#ctor(System.String)">
            <summary>
            Constructs a Music object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Music.Finalize">
            <summary>
            Destroyes a Music object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Music.Dispose">
            <summary>
            Destroys the unmanaged resources associated with this object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Music.Play">
            <summary>
            Begins playback.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Music.Stop">
            <summary>
            Stops playback.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Music.IsLooping">
            <summary>
            Returns whether or not this Music object is playing in a loop.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Music.Filename">
            <summary>
            The name of the file this was loaded from.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Music.Volume">
            <summary>
            Gets or sets the volume. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Music.Pan">
            <summary>
            Gets or sets the left-right balance.  This may or may not be supported
            by some drivers.
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Music.IsPlaying">
            <summary>
            Returns true if this Music is currently playing.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.Size">
            <summary>
            Replacement for System.Drawing.Size object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.#ctor(ERY.AgateLib.Geometry.Point)">
            <summary>
            Constructs a Size.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Size.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.#ctor(System.Drawing.Size)">
            <summary>
            Constructs a Size.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.op_Equality(ERY.AgateLib.Geometry.Size,ERY.AgateLib.Geometry.Size)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.op_Inequality(ERY.AgateLib.Geometry.Size,ERY.AgateLib.Geometry.Size)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.Equals(ERY.AgateLib.Geometry.Size)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.Geometry.Size.Empty">
            <summary>
            Empty Size.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.Ceiling(ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Rounds the SizeF structure up.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Size.op_Explicit(ERY.AgateLib.Geometry.Size)~System.Drawing.Size">
            <summary>
            Explicit conversion for System.Drawing interop.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Size.IsEmpty">
            <summary>
            Returns true if width and height are zero.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.Registrar">
            <summary>
            Static class with which drivers register themselves so that the library can
            instantiate them.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.Registrar.Initialize">
            <summary>
            Searches through FileManager.AssemblyPath for all *.dll files.  These files
            are loaded and searched for classes which derive from DisplayImpl, AudioImpl, etc.
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.Registrar.RegisterDisplayDriver(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.DisplayTypeID})">
            <summary>
            Registers a display driver as being available.
            </summary>
            <param name="info">Structure which contains enough information to instantiate
            the display driver's own DisplayImpl derived class.</param>
        </member>
        <member name="M:ERY.AgateLib.Drivers.Registrar.RegisterAudioDriver(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.AudioTypeID})">
            <summary>
            Registers an audio driver as being available.
            </summary>
            <param name="info">Structure which contains enough information to instantiate
            the audio driver's own AudioImpl derived class.</param>
        </member>
        <member name="M:ERY.AgateLib.Drivers.Registrar.RegisterInputDriver(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.InputTypeID})">
            <summary>
            Registers an input driver as being available.
            </summary>
            <param name="info">Structure which contains enough information to instantiate
            the input driver's own InputImpl derived class.</param>
        </member>
        <member name="M:ERY.AgateLib.Drivers.Registrar.UserSelectDrivers(System.Boolean,System.Boolean,System.Boolean,ERY.AgateLib.Drivers.DisplayTypeID@,ERY.AgateLib.Drivers.AudioTypeID@,ERY.AgateLib.Drivers.InputTypeID@)">
            <summary>
            Asks the user to select which drivers to use.
            </summary>
            <param name="chooseDisplay"></param>
            <param name="chooseAudio"></param>
            <param name="chooseInput"></param>
            <param name="selectedDisplay"></param>
            <param name="selectedAudio"></param>
            <param name="selectedInput"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.DisplayDriverInfo">
            <summary>
            Returns a collection with all the DriverInfo&lt;DisplayTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.AudioDriverInfo">
            <summary>
            Returns a collection with all the DriverInfo&lt;AudioTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.InputDriverInfo">
            <summary>
            Returns a collection with all the DriverInfo&lt;InputTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.CreatedDisplayTypeID">
            <summary>
            Returns the identifier for the DisplayImpl which was actually
            created.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.CreatedAudioTypeID">
            <summary>
            Returns the identifier for the AudioImpl which was actually
            created.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.Registrar.CreatedInputTypeID">
            <summary>
            Returns the identifier for the InputImpl which was actually
            created.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.LightManager">
            <summary>
            The LightManager class keeps a list of Light objects which can be used
            to setup the lighting in the rendering API.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.LightManager.AddPointLight(ERY.AgateLib.Geometry.Vector3,ERY.AgateLib.Geometry.Color)">
            <summary>
            Adds a point light to the specified position with the given diffuse color.
            </summary>
            <param name="position"></param>
            <param name="diffuse"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.LightManager.AddPointLight(ERY.AgateLib.Geometry.Vector3,ERY.AgateLib.Geometry.Color,ERY.AgateLib.Geometry.Color)">
            <summary>
            Adds a point light to the specified position with the given diffuse and ambient colors.
            </summary>
            <param name="position"></param>
            <param name="diffuse"></param>
            <param name="ambient"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.LightManager.DoLighting">
            <summary>
            This tells the Display to start use the Lights in this LightManager structure for
            lighting.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.LightManager.RemoveAt(System.Int32)">
            <summary>
            Removes a particular light.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ERY.AgateLib.LightManager.Add(ERY.AgateLib.Light)">
            <summary>
            Adds a Light to the list.  If there are more lights than possible, an exception is thrown.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ERY.AgateLib.LightManager.Clear">
            <summary>
            Removes all Lights from the list.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.LightManager.GetEnumerator">
            <summary>
            Enumerates the Lights in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.LightManager.Enabled">
            <summary>
            Gets or sets a flag indicating whether or not lighting calculations should be performed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.LightManager.Ambient">
            <summary>
            Gets or sets the global ambient light color.  This light color is applied to
            all objects rendered, regardless of their position.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.LightManager.Item(System.Int32)">
            <summary>
            Gets or sets a Light in the list.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.LightManager.Count">
            <summary>
            Gets the number of Lights in the list.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Sprite">
            <summary>
            The Sprite class represents a series of frames which are used
            to create a single animation.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(System.String,ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            The given file is loaded automatically, and frames are cut out from it
            of the specified size.
            </summary>
            <param name="filename"></param>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            The given file is loaded automatically, and frames are cut out from it
            of the specified size.
            </summary>
            <param name="filename"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            Frames are cut out from the given surface of the specified size.
            </summary>
            <param name="surface"></param>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(ERY.AgateLib.Surface,System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            Frames are cut out from the given surface of the specified size.
            </summary>
            <param name="surface"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.#ctor(System.String,ERY.AgateLib.Resources.ResourceManager)">
            <summary>
            Constructs a Sprite object, loading it from the file specified
            in the given ResourceManager object.
            </summary>
            <param name="name"></param>
            <param name="resources"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Clone">
            <summary>
            Makes a copy of this sprite and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Dispose">
            <summary>
            Disposes of unmanaged resources associated with this sprite.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Finalize">
            <summary>
            Destroyes this sprite object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(System.String)">
            <summary>
            Slices and dices the image passed into frames and adds them.
            Automatically skips blank ones.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(ERY.AgateLib.Surface)">
            <summary>
            Adds frames from the given surface, using the size of this sprite.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(System.String,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Adds frames from the given filename, using the size of this sprite.
            Frames are taken from startPoint, and with extraSpace inbetween.
            </summary>
            <param name="filename"></param>
            <param name="startPoint"></param>
            <param name="extraSpace"></param>
            <param name="skipBlank"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Adds frames from the given surface, using the size of this sprite.
            Frames are taken from startPoint, and with extraSpace inbetween.
            </summary>
            <param name="surface"></param>
            <param name="startPoint"></param>
            <param name="extraSpace"></param>
            <param name="skipBlank"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size,System.Boolean)">
            <summary>
            Slices and dices the image passed into frames and adds them.
            Frames are taken from the surface from left to right.
            </summary>
            <param name="surface">The surface to use to split up into the sprite frames.</param>
            <param name="startPoint">The starting point in pixels from which to parse frames.</param>
            <param name="size">The size of the image to cut out for each frame</param>
            <param name="extraSpace">How many extra pixels to insert between each frame.</param>
            <param name="skipBlank">Whether or not blank frames should be automatically dropped.</param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AddFrames(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size,ERY.AgateLib.Geometry.Size)">
            <summary>
            Slices and dices the image passed into frames and adds them.
            Frames are taken from the surface from left to right.
            </summary>
            <param name="surface">The surface to use to split up into the sprite frames.</param>
            <param name="startPoint">The starting point in pixels from which to parse frames.</param>
            <param name="size">The size of the image to cut out for each frame</param>
            <param name="extraSpace">How many extra pixels to insert between each frame.</param>
            <param name="array">How many frames to cut out.  eg. If array = {4, 1}, four sprites will be
            taken from left to right.</param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Draw the sprite to the given destination rectangle.
            Overrides scaling settings.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw(System.Single,System.Single)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw(ERY.AgateLib.Geometry.Point)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.DrawPoints(ERY.AgateLib.Geometry.Point[])">
            <summary>
            Draws the sprite at all the specified positions on screen.
            </summary>
            <param name="dest_pts"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Draw">
            <summary>
            Draws the sprite at the origin.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.DrawRects(ERY.AgateLib.Geometry.Rectangle[])">
            <summary>
            Draws the sprite at the specified rectangles.
            </summary>
            <param name="dest_rects"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.BeginQueueRects">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.BeginQueueRects(System.Int32)">
            <summary>
            
            </summary>
            <param name="guessCount"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.QueueRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            
            </summary>
            <param name="src_rect"></param>
            <param name="dest_rect"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.EndQueueRects">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale of the sprite.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the scale of the sprite.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle by the specified number of radians.
            </summary>
            <param name="radians"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle by the specified number of degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Update">
            <summary>
            Updates the animation of the sprite, using the DeltaTime given
            by the Display object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.Update(System.Double)">
            <summary>
            Updates the animation of the sprite, using the given frame time.
            </summary>
            <param name="time_ms">The amount of time to consider passed, in milliseconds.</param>
        </member>
        <member name="M:ERY.AgateLib.Sprite.AdvanceFrame">
            <summary>
            Shows the next frame in the sequence.  This pays attention
            to whether the animation is playing forwards or reverse.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Sprite.StartAnimation">
            <summary>
            Restarts the animation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.UseSpriteCache">
            <summary>
            Bool which indicates whether sprite frames should be cached to 
            disk after they've been cut out.  Speed up loading if used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.SpriteCachePath">
            <summary>
            Sets the path where SpriteFrames are saved, if the sprite cache
            is used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.SpriteWidth">
            <summary>
            Gets width of the sprite.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.SpriteHeight">
            <summary>
            Gets height of the sprite.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.SpriteSize">
            <summary>
            Gets the size of the sprite.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.DisplayWidth">
            <summary>
            Gets the width of the sprite when displayed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.DisplayHeight">
            <summary>
            Gets the height of the sprite when displayed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.DisplaySize">
            <summary>
            Gets or sets the size of the sprite when displayed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.Alpha">
            <summary>
            Gets or sets transparency value.
            0.0 is completely transparent
            1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.RotationCenter">
            <summary>
            Gets or sets the center of rotation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.DisplayAlignment">
            <summary>
            Gets or sets the interpretation of the position.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.Color">
            <summary>
            Gets or sets the color of the sprite.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.Visible">
            <summary>
            Gets or sets whether or not the sprite should be drawn when Draw is called.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.TimePerFrame">
            <summary>
            The amount of time each frame should display, in milliseconds.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.CurrentFrameIndex">
            <summary>
            The index of the current frame.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.CurrentFrame">
            <summary>
            Gets the currently displaying frame.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.PlayReverse">
            <summary>
            Gets or sets a flag which indicates whether or not this animation plays in 
            reverse instead.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.AnimationType">
            <summary>
            Gets or sets an enum value indicating what type of animation is happening.
            Looping - The animation will play from beginning to end and then restart.
            PingPong - The animation will play from beginning to end and then from end to beginning (continuously).
            Once - The animation plays once, and then shows its first frame.
            OnceHoldLast - The animation plays once, and leaves the last frame on.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.Animating">
            <summary>
            Gets or sets a flag which indicates:
            True if the animation is running.
            False if a single frame will be shown indefinitely.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Sprite.Frames">
            <summary>
            Gets the list of SpriteFrame objects in this sprite.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Sprite.AnimationStopped">
            <summary>
            Event which is raised when the animation is stopped.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Sprite.AnimationStarted">
            <summary>
            Event which is raised when the animation is started.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Sprite.PlayDirectionChanged">
            <summary>
            Event which is raised when the play direction is changed, as
            in the PingPong type.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Sprite.AnimType">
            <summary>
            Enum indicating the different types of automatic animation that
            take place.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.Looping">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and start back at frame 0.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.PingPong">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and then go back down to frame 0.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.Once">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end and then back to frame 0, stopping there.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.OnceHoldLast">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end and stop there.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.OnceDisappear">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and then disappear.  The Visible
            property of the Sprite object is set to false once
            the animation is complete.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Sprite.AnimType.Twice">
            <summary>
            Specifies that the sprite animation should go twice
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Sprite.SpriteEventHandler">
            <summary>
            Event handler type for sprite events.
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="T:ERY.AgateLib.SearchPath">
            <summary>
            A class which is used to simplify searching for files in several different
            directories.
            All paths entered are stored as absolute paths, so do not expect to add an
            item and retrieve it and have it be the same thing.
            <code></code>
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.#ctor">
            <summary>
            Constructs a SearchPath object.  No default paths are added
            (You might want to consider using SearchPath(".") instead to include
            the current directory.)
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.#ctor(System.String[])">
            <summary>
            Constructs a SearchPath object, and adds all the paths specified
            to the list of paths to search.
            </summary>
            <param name="array">A comma delimited list of strings.</param>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.#ctor(System.Int32,System.String[])">
            <summary>
            Constructs a SearchPath object, and adds all the paths specified
            to the list of paths to search, as well as subdirectories up to the
            level specified.
            </summary>
            <param name="levels">How many subdirectories each to add.</param>
            <param name="array">A comma delimited list of strings.</param>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.Add(System.String,System.Int32)">
            <summary>
            Recursively adds the specified directory, and all subdirectories up
            to the specified number of levels deep.
            </summary>
            <param name="item"></param>
            <param name="levels"></param>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.FindFileName(System.String)">
            <summary>
            Searches through all directories in the SearchPath object for the specified
            filename.  The search is performed in the order directories have been added,
            and the first result is returned.  If no file is found, null is returned.
            </summary>
            <param name="filename">Filename to search for.</param>
            <returns>The full path of the file, if it exists.  Null if no file is found.</returns>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.GetAllFiles">
            <summary>
            Gets all files in all paths.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.GetAllFiles(System.String)">
            <summary>
            Gets all files in all paths that match the specified search pattern.
            </summary>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.Add(System.String)">
            <summary>
            Adds a search path to the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.Clear">
            <summary>
            Clears all search paths from the list.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.Contains(System.String)">
            <summary>
            Checks to see if the given path is already in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the list of paths to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.Remove(System.String)">
            <summary>
            Removes an item from the search path list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SearchPath.GetEnumerator">
            <summary>
            Gets an IEnumerator&lt;string&gt; object for iterating through
            the search paths.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.SearchPath.Count">
            <summary>
            Gets how many search paths are listed here.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SearchPath.Item(System.Int32)">
            <summary>
            Returns a search path at a given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.InputState`1">
            <summary>
            Class which encapsulates functionality associated with a set of commands.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ERY.AgateLib.InputState`1.#ctor">
            <summary>
            Constructs an InputState object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.InputState`1.Dispose">
            <summary>
            Disposes of this object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.InputState`1.Add(`0)">
            <summary>
            Creates and adds a new input command with the specified identifier.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ERY.AgateLib.InputState`1.Update">
            <summary>
            Updates each of the input commands' state.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputState`1.Item(`0)">
            <summary>
            Gets or sets the specified input command.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.InputState`1.PushedCommandCount">
            <summary>
            Returns how many commands are currently set on.. ie. the user is 
            pressing buttons for them.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputState`1.AutoUpdate">
            <summary>
            Gets or sets whether or not this InputState should automatically update.
            If you are done with it, you should set this to false, or call Dispose().
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Mouse">
            <summary>
            Class which encapsulates input from the mouse.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Mouse.Show">
            <summary>
            Shows the OS cursor.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Mouse.Hide">
            <summary>
            Hides the OS cursor.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Mouse.OnMouseMove">
            <summary>
            Raises the MouseMove event.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Mouse.OnMouseDoubleClick(ERY.AgateLib.Mouse.MouseButtons)">
            <summary>
            Raises the MouseDoubleClick event.
            </summary>
            <param name="btn"></param>
        </member>
        <member name="P:ERY.AgateLib.Mouse.Position">
            <summary>
            Gets or sets the position of the cursor, in client coordinates
            of the current display window.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Mouse.X">
            <summary>
            Gets or sets the X position of the cursor, in client coordinates 
            of the current display window.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Mouse.Y">
            <summary>
            Gets or sets the Y position of the cursor, in client coordinates
            of the current display window.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Mouse.Buttons">
            <summary>
            Gets the MouseState structure which indicates which buttons
            are pressed.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Mouse.MouseMove">
            <summary>
            Event which occurs when the mouse is moved.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Mouse.MouseDown">
            <summary>
            Event which occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Mouse.MouseUp">
            <summary>
            Event which occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Mouse.MouseDoubleClickEvent">
            <summary>
            Event which occurs when a mouse button is double-clicked.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Mouse.MouseButtons">
            <summary>
            Mouse Buttons enum.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.None">
            <summary>
            No mouse buttons.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.Primary">
            <summary>
            Primary button, typically the left button.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.Secondary">
            <summary>
            Secondary button, typically the right button.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.Middle">
            <summary>
            Middle button on some mice.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.ExtraButton1">
            <summary>
            Extra Button
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.ExtraButton2">
            <summary>
            Extra Button
            </summary>
        </member>
        <member name="F:ERY.AgateLib.Mouse.MouseButtons.ExtraButton3">
            <summary>
            Extra Button
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Mouse.MouseState">
            <summary>
            Class which encapsulates the state of the mouse.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Mouse.MouseState.Item(ERY.AgateLib.Mouse.MouseButtons)">
            <summary>
            Gets or sets the pressed values of the passed mouse buttons.
            Generates events when buttons are pressed or released.
            The MouseButtons enum has the FlagsAttribute, so you can make a bitwise
            combination of these values.  
            Getting the state with a combination of flags returns true if ANY one of
            the buttons are down.
            Setting the state with a combination of flags will set the state for
            all flags passed.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.DisplayWindow">
            <summary>
            A class representing a screen region which is used as a RenderTarget.
            </summary>
            <remarks>
            Creating a DisplayWindow can be done in two ways.  By specifying
            a title and width and height, the DisplayWindow will create and manage
            a window.
            
            Alternatively, a control may be specified to render into.
            </remarks>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a DisplayWindow object using the specified System.Windows.Forms.Control
            object as a render context.  A DisplayWindow made in this manner cannot be made
            into a full-screen DisplayWindow.
            </summary>
            <remarks>
            [Experimental - The API may be changed in the future.]
            </remarks>
            <param name="renderTarget">Windows.Forms control which should be used as the
            render target.</param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a DisplayWindow object by creating a windowed Form.
            By default, this window does not allow the user to resize it.
            </summary>
            <param name="title"></param>
            <param name="clientWidth"></param>
            <param name="clientHeight"></param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a DisplayWindow object by creating a windowed Form.
            By default, this window does not allow the user to resize it.
            </summary>
            <param name="title">Title of the window.</param>
            <param name="clientWidth">Width of the drawing area in pixels.</param>
            <param name="clientHeight">Height of the drawing area in pixels.</param>
            <param name="iconFile">File name of a Win32 .ico file to use for the window icon.  Pass
            null or "" to not use an icon.</param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a DisplayWindow object by creating a windowed or fullscreen Form.
            By default, this window does not allow the user to resize it.
            </summary>
            <param name="title">Title of the window.</param>
            <param name="clientWidth">Width of the drawing area in pixels.</param>
            <param name="clientHeight">Height of the drawing area in pixels.</param>
            <param name="iconFile">File name of a Win32 .ico file to use for the window icon.</param>
            <param name="startFullscreen">True to start as a full screen window.</param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a DisplayWindow object by creating a windowed or fullscreen Form.
            </summary>
            <param name="title">Title of the window.</param>
            <param name="clientWidth">Width of the drawing area in pixels.</param>
            <param name="clientHeight">Height of the drawing area in pixels.</param>
            <param name="iconFile">File name of a Win32 .ico file to use for the window icon.</param>
            <param name="startFullscreen">True to start as a full screen window.</param>
            <param name="allowResize">True to allow the user to manually resize the window by
            dragging the border.</param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a DisplayWindow object by creating a windowed or fullscreen Form.
            By default, this window does not allow the user to resize it.
            
            <para><b>Deprecated.</b>  Use an overload which includes the icon File argument.</para>
            </summary>
            <param name="title">Title of the window.</param>
            <param name="clientWidth">Width of the drawing area in pixels.</param>
            <param name="clientHeight">Height of the drawing area in pixels.</param>
            <param name="startFullscreen">True to start as a full screen window.</param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a DisplayWindow object by creating a windowed or fullscreen Form.
            </summary>
            <param name="title"></param>
            <param name="clientWidth"></param>
            <param name="clientHeight"></param>
            <param name="startFullscreen"></param>
            <param name="allowResize"></param>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.Finalize">
            <summary>
            Destructs a DisplayWindow
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.ToggleFullScreen">
            <summary>
            Toggles windowed and full screen.
            Not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.ToggleFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Toggles windowed and full screen.
            Not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.SetWindowed">
            <summary>
            Sets the display to windowed.  Does nothing if the display is already
            windowed.  The DisplayWindow retains the same height and width as the
            previous full screen resolution.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.SetFullScreen">
            <summary>
            Sets the display to a full screen display.  This overload uses the
            desktop resolution for the full-screen display.
            </summary>
            <remarks>
            This call is not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </remarks>
        </member>
        <member name="M:ERY.AgateLib.DisplayWindow.SetFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the display to a full screen display.  The resolution chosen is 
            driver/video card/monitor dependent, but it should be fairly close to
            values specified.
            </summary>
            <remarks>
            This call is not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </remarks>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.IsClosed">
            <summary>
            Returns true if this DisplayWindow has been closed, either
            by a call to Dispose(), or perhaps the user clicked the close
            box in a form.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Closed">
            <summary>
            OBSOLETE: Use IsClosed property instead. 
            <para>
            Returns true if this DisplayWindow has been closed, either
            by a call to Dispose(), or perhaps the user clicked the close
            box in a form.</para>
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Size">
            <summary>
            Gets or sets the size of the client area in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Width">
            <summary>
            Gets or sets the width of the client area in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Height">
            <summary>
            Gets or sets the height of the client area in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.MousePosition">
            <summary>
            Gets or sets the position of the cursor, in the 
            client coordinates of the window.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Impl">
            <summary>
            Returns the DisplayWindowImpl object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.DisplayWindow.IsFullScreen">
            <summary>
            Returns true if this window is displayed fullscreen.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.DisplayWindow.Resize">
            <summary>
            Event raised when the window is resized by the user.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.JoystickImpl">
            <summary>
            Class which implements a Joystick.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.JoystickImpl.Recalibrate">
            <summary>
            Recalibrates the joystick.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.JoystickImpl.Poll">
            <summary>
            Polls the joystick for input.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.JoystickImpl.GetAxisValue(System.Int32)">
            <summary>
            Gets the current value for the given axis.
            Axis 0 is always the x-axis, axis 1 is always the y-axis on
            controlers which have this capability.
            </summary>
            <param name="axisIndex"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.AxisCount">
            <summary>
            Gets how many axes are on this joystick.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.ButtonCount">
            <summary>
            Gets how many buttons are on this joystick.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.Buttons">
            <summary>
            Gets a bool array indicating state of the buttons.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.Xaxis">
            <summary>
            Returns the value of the gamepad x-axis.
            Ranges are:
            -1 all the way to the left
             0 centered
             1 all the way to the right
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.Yaxis">
            <summary>
            Returns the value of the gamepad y-axis.
            Ranges are:
            -1 all the way to the top
             0 centered
             1 all the way to the bottom
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.AxisThreshold">
            <summary>
            Need documentation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.JoystickImpl.PluggedIn">
            <summary>
            Gets whether or not this joystick is plugged in.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.NullJoystickImpl">
            <summary>
            Implements an imaginary joystick that does nothing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.NullJoystickImpl.Recalibrate">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.NullJoystickImpl.GetAxisValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="axisIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.NullJoystickImpl.Poll">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.AxisCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.ButtonCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.Buttons">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.Xaxis">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.Yaxis">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.AxisThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.NullJoystickImpl.PluggedIn">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Input">
            <summary>
            Static class which contains basic functions for handling non-keyboard and mouse
            input.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Input.Initialize(ERY.AgateLib.Drivers.InputTypeID)">
            <summary>
            Initializes the input system by instantiating the driver with the given
            InputTypeID.  The input driver must be registered with the Registrar
            class.
            </summary>
            <param name="inputType"></param>
        </member>
        <member name="M:ERY.AgateLib.Input.Dispose">
            <summary>
            Disposes of the input driver.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Input.InitializeJoysticks">
            <summary>
            Initializes all joysticks.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Input.PollJoysticks">
            <summary>
            Polls all joysticks for input now.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Input.Impl">
            <summary>
            Gets the object which handles all of the actual calls to Input functions.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Input.DisposeInput">
            <summary>
            Event raised when Input.Dispose() is called.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Input.JoystickCount">
            <summary>
            Counts the number of joysticks attached to the system.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Input.Joysticks">
            <summary>
            Returns a list of joysticks which can be iterated through,
            or accessed like an array.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Input.MinJoysticks">
            <summary>
            Minimum number of joysticks for the system to have.
            If there aren't enough physical joysticks attached to
            the system, NullJoysticks will be created to emulate
            a joystick which does nothing. (this is to avoid
            NullReferenceExceptions).
            </summary>
            <remarks>
            [Experimental - The API may be changed in the future, or this
            feature may be removed.]
            </remarks>
        </member>
        <member name="P:ERY.AgateLib.Input.PollInterval">
            <summary>
            Gets or sets the interval in milliseconds for the time between
            automatic joystick polls.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Input.PollFrequency">
            <summary>
            Gets or sets the number of times per second that joysticks should
            be polled.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Input.InputSystemDelegate">
            <summary>
            Delegate for DisposeInput event.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.Color">
            <summary>
            Replacement for System.Drawing.Color structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.FromArgb(System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Creates a Color structure from the given color and alpha value.
            </summary>
            <param name="a"></param>
            <param name="baseColor"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color structure from r, g, b values.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color structure from a, r, g, b values.
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.FromArgb(System.Int32)">
            <summary>
            Creates a color structure from a 32-bit integer, in
            the format 0xAARRGGBB.
            </summary>
            <param name="argbvalue"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.FromArgb(System.String)">
            <summary>
            Converts a string to an ERY.AgateLib.Geometry.Color structure.
            </summary>
            <param name="str">The string to convert.  It must be in one of the following formats
            RRGGBB, AARRGGBB, 0xRRGGBB, 0xAARRGGBB where AA, RR, GG, BB are each a hexidecimal
            number (such as "ff" or "8B").</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.ByteValueFromHex(System.String)">
            <summary>
            Converts a string like "FF" to a byte value.  Throws an exception if the
            string does not convert to a value which fits into a byte.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.ToString">
            <summary>
            Returns a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.GetHashCode">
            <summary>
            Returns a unique hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.Equals(System.Object)">
            <summary>
            Checks to see if this is equal to another object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.Equals(ERY.AgateLib.Geometry.Color)">
            <summary>
            Checks to see if this is equal to another Color structure.
            </summary>
            <param name="clr"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.op_Equality(ERY.AgateLib.Geometry.Color,ERY.AgateLib.Geometry.Color)">
            <summary>
            Compares two colors to see if they are equal.
            </summary>
            <param name="clra"></param>
            <param name="clrb"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.op_Inequality(ERY.AgateLib.Geometry.Color,ERY.AgateLib.Geometry.Color)">
            <summary>
            Compares two colors to see if they are not equal.
            </summary>
            <param name="clra"></param>
            <param name="clrb"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.op_Explicit(ERY.AgateLib.Geometry.Color)~System.Drawing.Color">
            <summary>
            Explicit conversion to a System.Drawing.Color structure, for
            interop with System.Drawing namespaces.
            </summary>
            <param name="clr"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.op_Explicit(System.Drawing.Color)~ERY.AgateLib.Geometry.Color">
            <summary>
            Explicit conversion from a System.Drawing.Color structure, for
            interop with System.Drawing namespaces.
            </summary>
            <param name="clr"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Color.ToArgb">
            <summary>
            Converts this Color structure to a 32-bit integer in the format
            0xAARRGGBB.  This is suitable for input to Color.FromArgb to 
            reproduce the color structure.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.AliceBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.AntiqueWhite">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Aqua">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Aquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Azure">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Beige">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Bisque">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Black">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.BlanchedAlmond">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.BlueViolet">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Brown">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.BurlyWood">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.CadetBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Chartreuse">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Chocolate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Coral">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.CornflowerBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Cornsilk">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Crimson">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Cyan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkCyan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkGoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkKhaki">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkMagenta">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkOliveGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkOrange">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkOrchid">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkRed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkSalmon">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkSlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkSlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DarkViolet">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DeepPink">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DeepSkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DimGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.DodgerBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Firebrick">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.FloralWhite">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.ForestGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Fuchsia">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Gainsboro">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.GhostWhite">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Gold">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Goldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Gray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Green">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.GreenYellow">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Honeydew">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.HotPink">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.IndianRed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Indigo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Ivory">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Khaki">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Lavender">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LavenderBlush">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LawnGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LemonChiffon">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightCoral">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightCyan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightGoldenrodYellow">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightPink">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightSalmon">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightSkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightSlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightSteelBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LightYellow">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Lime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.LimeGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Linen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Magenta">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Maroon">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumAquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumOrchid">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumPurple">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumSlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumSpringGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MediumVioletRed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MidnightBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MintCream">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.MistyRose">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Moccasin">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.NavajoWhite">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Navy">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.OldLace">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Olive">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.OliveDrab">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Orange">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.OrangeRed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Orchid">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PaleGoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PaleGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PaleTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PaleVioletRed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PapayaWhip">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PeachPuff">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Peru">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Pink">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Plum">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.PowderBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Purple">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Red">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.RosyBrown">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.RoyalBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SaddleBrown">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Salmon">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SandyBrown">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SeaShell">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Sienna">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Silver">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Snow">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SpringGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.SteelBlue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Tan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Teal">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Thistle">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Tomato">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Turquoise">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Violet">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Wheat">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.White">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.WhiteSmoke">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.Yellow">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.YellowGreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.A">
            <summary>
            Gets or sets the alpha channel.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.R">
            <summary>
            Gets or sets the red channel.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.G">
            <summary>
            Gets or sets the green channel.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Color.B">
            <summary>
            Gets or sets the blue channel.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ScreenMode">
            <summary>
            Class which contains information about an available screen mode.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ScreenMode.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a ScreenMode object.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:ERY.AgateLib.ScreenMode.SelectBestMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches through the available screen resolutions and selects the one
            which is the closest match for the parameters passed in.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
            <returns>null if no screen mode could be found, otherwise the appropriate
            ScreenMode structure.</returns>
        </member>
        <member name="P:ERY.AgateLib.ScreenMode.Width">
            <summary>
            Width of the screen mode in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ScreenMode.Height">
            <summary>
            Height of the screen mode in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ScreenMode.Bpp">
            <summary>
            Bits per pixel of the screen mode.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.OriginAlignment">
            <summary>
            OriginAlignment enum.  Used to specify how
            points should be interpreted.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.TopLeft">
            <summary>
            Point indicates top-left.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.TopCenter">
            <summary>
            Point indicates top-center.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.TopRight">
            <summary>
            Point indicates top-right.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.CenterLeft">
            <summary>
            Point indicates center-left.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.Center">
            <summary>
            Point indicates center.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.CenterRight">
            <summary>
            Point indicates center-right.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.BottomLeft">
            <summary>
            Point indicates bottom-left.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.BottomCenter">
            <summary>
            Point indicates bottom-center.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.OriginAlignment.BottomRight">
            <summary>
            Point indicates bottom-right.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Origin">
            <summary>
            Static class which performs necessary calculates based on OriginAlignment
            values.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Origin.Calc(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.Size)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Origin.CalcF(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.Size)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Origin.CalcF(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.SizeF)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Origin.Calc(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.Size,System.Int32@,System.Int32@)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.Origin.CalcRect(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Modifies the rectangle by taking its Location and converting it
            using Calc so that the rectangle outlines the actual destination.
            </summary>
            <param name="origin"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Origin.CalcRect(ERY.AgateLib.OriginAlignment,ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Size)">
            <summary>
            Modifies the rectangle by taking its Location and converting it
            using Calc so that the rectangle outlines the actual destination.
            </summary>
            <param name="origin"></param>
            <param name="rect"></param>
            <param name="effectiveSize"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.Drivers.DisplayTypeID">
            <summary>
            List of identifiers of known or planned display drivers.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.DriverTypeIDBase">
            <summary>
            Class which emulates an enum value for driver registration.
            The purpose of having this is to allow these as constraints
            on generics.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverTypeIDBase.Equals(System.Int32)">
            <summary>
            Implementation of IEquatable&lt;int&gt;.Equals().
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DisplayTypeID.Equals(System.Int32)">
            <summary>
            Implementation of IEquatable&lt;int&gt; from base class.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DisplayTypeID.Equals(ERY.AgateLib.Drivers.DisplayTypeID)">
            <summary>
            Implementation of IEquatable&lt;DisplayTypeID&gt;.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            display driver for the system.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.Reference">
            <summary>
            The reference driver is implemented using System.Drawing.  This is useful for
            debugging the development of a new driver, as it should behave exactly like the
            reference driver (but hopefully be much faster).
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.Direct3D_MDX_1_1">
            <summary>
            Driver Implementation using Managed DirectX 1.1.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.Direct3D_MDX_2_0_Beta">
            <summary>
            Driver implementation using Managed DirectX 2.0 beta.  Since Microsoft has discontinued
            development on MDX2.0 in favor of the XNA framework);}} this driver is obsolete.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.Direct3D_XNA">
            <summary>
            Driver Implementation using XNA Studio.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.WGL">
            <summary>
            Driver implementation using OpenGL);}} with WGL for creation of windows and management of
            memory.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.OpenGL">
            <summary>
            Driver implememtation using OpenGL);}} with some platform-independent library for window
            creation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.DisplayTypeID.SDL">
            <summary>
            Driver implementation using SDL.  SDL.NET does not support many of the basic features
            of this library (notably);}} rotation of images) so is not considered an adequate driver
            for general purpose use.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.AudioTypeID">
            <summary>
            List of identifiers of known or planned audio drivers.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.AudioTypeID.Equals(System.Int32)">
            <summary>
            Implementation of IEquatable&lt;int&gt; from base class.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.AudioTypeID.Equals(ERY.AgateLib.Drivers.AudioTypeID)">
            <summary>
            Implementation of IEquatable&lt;AudioTypeID&gt;.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            audio driver for the system.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.Silent">
            <summary>
            A driver which does nothing.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.DirectSound">
            <summary>
            A DirectSound implementation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.XAct">
            <summary>
            Implementation using XNA Studio
            (what will this be called), anyway?)
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.OpenAL">
            <summary>
            Implementation using the cross-platform OpenAL library.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.AudioTypeID.FMod">
            <summary>
            Implementation using the cross-platform FMod library.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.InputTypeID">
            <summary>
            List of identifiers of known or planned input drivers.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.InputTypeID.Equals(System.Int32)">
            <summary>
            Implementation of IEquatable&lt;int&gt; from base class.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.InputTypeID.Equals(ERY.AgateLib.Drivers.InputTypeID)">
            <summary>
            Implementation of IEquatable&lt;InputTypeID&gt;.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.InputTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            audio driver for the system.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.InputTypeID.Silent">
            <summary>
            A driver with no joysticks.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.InputTypeID.DirectInput">
            <summary>
            A DirectSound implementation.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.InputTypeID.XInput">
            <summary>
            Implementation using the XNA framework.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.PlatformTypeID">
            <summary>
            List of identifiers for known or planned platforms to support.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Drivers.PlatformTypeID.Equals(System.Int32)">
            <summary>
            Implementation of IEquatable&lt;int&gt; from base class.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.PlatformTypeID.Equals(ERY.AgateLib.Drivers.PlatformTypeID)">
            <summary>
            Implementation of IEquatable&lt;PlatformTypeID&gt;.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Drivers.PlatformTypeID.None">
            <summary>
            Indicates that no platform specific methods are available.
            Managed equivalents are used where available.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.PlatformTypeID.Windows">
            <summary>
            Indicates that Windows platform specific methods are provided
            by the driver.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Drivers.PlatformTypeID.Linux">
            <summary>
            indicates that X-Windows provides windowing functions.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.DisplayWindowForm">
            <summary>
            A basic form used for rendering into.
            </summary>
            <summary>
            Form which is used fora generic display.
            </summary>
            <remarks>
            [Experimental - This class will be moved to into a different assembly
            in the future.]
            </remarks>
        </member>
        <member name="F:ERY.AgateLib.Utility.DisplayWindowForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.DisplayWindowForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ERY.AgateLib.Utility.DisplayWindowForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.DisplayWindowForm.#ctor">
            <summary>
            Constructs a DisplayWindowForm object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.DisplayWindowForm.RenderTarget">
            <summary>
            The control which is rendered into.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.StringTransformer">
            <summary>
            Static class for basic string transformers.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.StringTransformer.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.StringTransformer.None">
            <summary>
            Object which does no transformation
            </summary>
        </member>
        <member name="F:ERY.AgateLib.StringTransformer.ToUpper">
            <summary>
            Object which converts a string to upper case.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.StringTransformer.ToLower">
            <summary>
            Object which converts a string to lower case.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.StringTransformer.Trans_NoTransformation">
            <summary>
            Class which does not do any transformation
            </summary>
        </member>
        <member name="M:ERY.AgateLib.StringTransformer.Trans_NoTransformation.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.StringTransformer.Trans_ToUpperCase">
            <summary>
            Class which converts string to upper case.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.StringTransformer.Trans_ToUpperCase.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.StringTransformer.Trans_ToLowerCase">
            <summary>
            Class which converts string to lower case.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.StringTransformer.Trans_ToLowerCase.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.Geometry.Vector3">
            <summary>
            Structure which describes a vector in 3-space.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Vector3 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Vector3 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="F:ERY.AgateLib.Geometry.Vector3.Empty">
            <summary>
            Vector representing the origin.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Vector3.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Vector3.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Vector3.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.SpriteFrame">
            <summary>
            Class for a single frame of a sprite.
            
            This class can automatically trim the frame, so that extra space around the
            object which is transparent is not drawn.  This is taken advantage of if 
            surfaces are packed to create a tighter packing and fit more objects on
            the same texture.
            
            SpriteFrame contains a reference count.  If you manually copy it, be sure
            to call AddRef unless you use the Clone method.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.Finalize">
            <summary>
            Destroys this SpriteFrame.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.Dispose">
            <summary>
            Reduces the reference counter for this class, and disposes of unmanaged
            resources if the counter hits zero.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.AddRef">
            <summary>
            Adds one to the reference counter.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.Clone">
            <summary>
            Copies this object.
            
            Actually, this just increases the reference counter and returns this
            object.  Be sure to Dispose the result when finished with it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.SetFrameNoTrim(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size)">
            <summary>
            Sets the frame of this object, and does not trim it.
            </summary>
            <param name="srcSurface"></param>
            <param name="offset"></param>
            <param name="originalSize"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.SetFrame(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size)">
            <summary>
            Sets the frame from a section of the source surface.
            </summary>
            <param name="srcSurface"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.SetFrame(ERY.AgateLib.Surface,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the frame from a section of the source surface.
            </summary>
            <param name="srcSurface"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.SetFrame(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Sets the frame from a section of the source surface.
            </summary>
            <param name="srcSurface"></param>
            <param name="rect"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteFrame.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws this surface at the specified destination point with the specified rotation
            center.
            </summary>
            <param name="dest_x"></param>
            <param name="dest_y"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="P:ERY.AgateLib.SpriteFrame.IsDisposed">
            <summary>
            Returns true if the internal unmanaged resources have been disposed.
            This happens when Dispose is called until the reference count is zero.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteFrame.IsBlank">
            <summary>
            Returns true if the entire frame is transparent.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteFrame.Surface">
            <summary>
            Returns the surface object which is drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteFrame.DisplaySize">
            <summary>
            Gets or sets the display size.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteFrame.OriginalSize">
            <summary>
            Gets the original size of the frame.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.RefCounter`1">
            <summary>
            Class which implements a reference counter around a Disposable object.
            The object is disposed when the reference count drops to zero.  This class
            should not be used directly, instead use the Ref&lt;T&gt; structure.
            </summary>
            <remarks>
            [Experimental - This class may disappear in the future.]
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ERY.AgateLib.Utility.RefCounter`1.#ctor(`0)">
            <summary>
            Constructs a RefCounter object around the specified object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.RefCounter`1.AddRef">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.RefCounter`1.Dispose">
            <summary>
            Decreases the reference count, and if it hits zero Dispose is
            called on the object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.RefCounter`1.GetRefCount">
            <summary>
            Returns the number of references.
            This is meant for debugging purposes only, do not write code which 
            calls Dispose until GetRefCount drops to zero.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Utility.RefCounter`1.Value">
            <summary>
            Gets the object this is wrapped around.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.RefCounter`1.IsDisposed">
            <summary>
            Returns true if the object has had its Dispose member called, and thus no
            more calls on that object should be made.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.Ref`1">
            <summary>
            A structure which is used for copying RefCounter&lt;T&gt; around.
            In order to make sure reference counters are updated correctly, never
            use the equals operator with this object.  Always create a new one and
            pass the old one to the constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ERY.AgateLib.Utility.Ref`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.Ref`1.#ctor(ERY.AgateLib.Utility.Ref{`0})">
            <summary>
            
            </summary>
            <param name="copyfrom"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.Ref`1.Dispose">
            <summary>
            Releases this reference to the object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.Ref`1.IsDisposed">
            <summary>
            Returns true if this reference has been disposed.
            This does not indicate whether the object being referenced has been disposed,
            but it may have been if this was the last reference.  In any case, if this
            is true, you shouldn't access the object anyway.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.Ref`1.Value">
            <summary>
            Returns the object being wrapped around.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.Ref`1.Counter">
            <summary>
            The RefCounter&lt;T&gt; object this wraps.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.FileManager">
            <summary>
            Manages file locations and automatic finding of files.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.FileManager.CheckCrossPlatform(System.String)">
            <summary>
            Checks to see if a filepath is entered in a cross-platform 
            manner, and returns true if it is.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the passed path is cross-platform.</returns>
        </member>
        <member name="M:ERY.AgateLib.FileManager.OpenFile(ERY.AgateLib.SearchPath,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens an existing file.
            </summary>
            <param name="path"></param>
            <param name="filename"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.FileManager.PathChars">
            <summary>
            Indicates the characters that the application can use to specify
            directories, when using methods in this class to open files.
            
            Defaults to "/".  
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.NonCrossPlatformChars">
            <summary>
            Returns a list of characters which may be valid file path characters
            on some platforms, but not others.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.AssemblyPath">
            <summary>
            Gets or sets the SearchPath object which contains the paths used for
            finding assemblies.  Defaults to containing only the directory where
            the application executable is located.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.ImagePath">
            <summary>
            Gets or sets the SearchPath object which contains the paths used for
            finding images.  Defaults to containing only the current directory.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.SoundPath">
            <summary>
            Gets or sets the SearchPath object which contains the paths used for
            finding sound files.  Defaults to containing only the current directory.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.MusicPath">
            <summary>
            Gets or sets the SearchPath object which contains the paths used for
            finding music files.  Defaults to containing only the current directory.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.BufferStreams">
            <summary>
            Gets or sets a boolean value indicating whether or not streams created
            by the FileManager should be wrapped in a BufferedStream object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FileManager.BufferSize">
            <summary>
            Gets or sets how large of a buffer should be used if BufferStreams is true.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.SetSystemsForm">
            <summary>
            A form which is used to ask the user which subsystems to use.
            </summary>
            <remarks>
            [Experimental - This class will be moved to into a different assembly
            in the future.]
            </remarks>
            <summary>
            Form which allos the user to choose what drivers should be used.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs the form.  Specifies whether display, audio and input
            should be allowed to be chosen.
            </summary>
            <param name="chooseDisplay"></param>
            <param name="chooseAudio"></param>
            <param name="chooseInput"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.SetDefaultDisplay(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.DisplayTypeID})">
            <summary>
            Sets default.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.SetDefaultAudio(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.AudioTypeID})">
            <summary>
            Sets default.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.SetDefaultInput(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.InputTypeID})">
            <summary>
            Sets default.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.AddDisplayType(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.DisplayTypeID})">
            <summary>
            Adds.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.AddAudioType(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.AudioTypeID})">
            <summary>
            Adds.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.AddInputType(ERY.AgateLib.Drivers.DriverInfo{ERY.AgateLib.Drivers.InputTypeID})">
            <summary>
            Adds.
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:ERY.AgateLib.Utility.SetSystemsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ERY.AgateLib.Utility.SetSystemsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.SetSystemsForm.DisplayType">
            <summary>
            DisplayTypeID chosen by user.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.SetSystemsForm.AudioType">
            <summary>
            AudioTypeID chosen by user.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Utility.SetSystemsForm.InputType">
            <summary>
            InputTypeID chosen by user.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.FontStyle">
            <summary>
            Enumeration which allows selection of font styles when creating
            a font from the OS.  This enum has the FlagsAttribute, so its members
            can be combined in a bitwise fashion.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.FontStyle.None">
            <summary>
            No style is applied.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.FontStyle.Bold">
            <summary>
            Make the font bold.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.FontStyle.Italic">
            <summary>
            Use italics.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.FontStyle.Strikeout">
            <summary>
            Strikeout through the font glyphs.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.FontStyle.Underline">
            <summary>
            Underline beneath the glyphs.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.FontSurface">
            <summary>
            Class which represents a font to draw on the screen.
            <remarks>When creating a FontSurface, if you are going to be
            scaling the font, it usually looks much better to make a large font
            and scale it to a smaller size, rather than vice-versa.</remarks>
            </summary>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.#ctor(System.String,System.Single)">
            <summary>
            Creates a FontSurface object from the given fontFamily.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.#ctor(System.String,System.Single,ERY.AgateLib.FontStyle)">
            <summary>
            Creates a FontSurface object from the given fontFamily.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.#ctor(ERY.AgateLib.ImplBase.FontSurfaceImpl)">
            <summary>
            Private initializer to tell it what impl to use.
            </summary>
            <param name="implToUse"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.BitmapMonospace(System.String,ERY.AgateLib.Geometry.Size)">
            <summary>
            This function loads a monospace bitmap font from the specified image file.
            Only the character size is given.  It is assumed that all ASCII characters 
            from 0 to 255 are present, in order from left to right, and top to bottom.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="filename"></param>
            <param name="characterSize"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.BitmapFont(System.String,System.Single)">
            <summary>
            This function creates a font from the specified font family by loading it
            with System.Drawing and creating a texture from the characters.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.BitmapFont(System.String,System.Single,ERY.AgateLib.FontStyle)">
            <summary>
            This function creates a font from the specified font family by loading it
            with System.Drawing and creating a texture from the characters.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.Finalize">
            <summary>
            Destroys this object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.Dispose">
            <summary>
            Disposes of this object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale of the font.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the scale of the font.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.StringDisplayWidth(System.String)">
            <summary>
            Measures the display width of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.StringDisplayHeight(System.String)">
            <summary>
            Measures the display height of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.StringDisplaySize(System.String)">
            <summary>
            Measures the display size of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.DrawText(ERY.AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.DrawText(ERY.AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:ERY.AgateLib.FontSurface.DrawText(System.String)">
            <summary>
            Draws the specified string at the origin.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.StringTransformer">
            <summary>
            Gets or sets how strings are transformed when they are drawn to the screen.
            This is useful for bitmap fonts which contain only all uppercase letters, for
            example.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.DisplayAlignment">
            <summary>
            Sets the interpretation of the draw point used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.Color">
            <summary>
            Sets the color of the font.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.Alpha">
            <summary>
            Sets the transparency of the font.
            0.0 is fully transparent
            1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.FontSurface.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Geometry.Rectangle">
            <summary>
            Replacement for System.Drawing.Rectangle structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.#ctor(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Size)">
            <summary>
            Construts a rectangle.
            </summary>
            <param name="pt"></param>
            <param name="sz"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructs a rectangle.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="rect"></param>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Static method which returns a rectangle with specified left, top, right and bottom.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if the rectangle contains the specified point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Contains(ERY.AgateLib.Geometry.Point)">
            <summary>
            Returns true if the rectangle contains the specified point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Contains(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Returns true if the rectangle entirely contains the specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.IntersectsWith(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Returns true if this intersects another rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.op_Equality(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.op_Inequality(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.ToString">
            <summary>
            Creates a string representing this rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Equals(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:ERY.AgateLib.Geometry.Rectangle.Empty">
            <summary>
            Empty rectangle
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Intersect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Static method returning the intersection of two rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Ceiling(ERY.AgateLib.Geometry.RectangleF)">
            <summary>
            Rounds the coordinates in the rectangle up.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.Union(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a new rectangle which contains all the area of the two passed in rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Geometry.Rectangle.op_Explicit(ERY.AgateLib.Geometry.Rectangle)~System.Drawing.Rectangle">
            <summary>
            For inter-op with System.Drawing.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Y">
            <summary>
            Y value
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Bottom">
            <summary>
            Gets bottom.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Left">
            <summary>
            Gets left.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Top">
            <summary>
            Gets top.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Right">
            <summary>
            Gets right.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Location">
            <summary>
            Gets or sets top-left point.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.Size">
            <summary>
            Gets or sets size.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Geometry.Rectangle.IsEmpty">
            <summary>
            True if this is (0,0,0,0).
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.IDisplayCaps">
            <summary>
            Interface which allows querying of Display capabilities.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsFullScreen">
            <summary>
            Indicates whether or not full screen windows can be created.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsFullScreenModeSwitching">
            <summary>
            Indicates whether or not the screen resolution can be changed.
            If the Display driver supports full screen but not mode switching,
            then a DisplayWindow which is created with as a full screen window
            cannot change resolutions after it is initially set.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsScaling">
            <summary>
            - Indicates whether setting Surface.SetScale has any visible effect.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsRotation">
            <summary>
             Indicates whether setting Surface.RotationAngle has any visible effect.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsColor">
            <summary>
            Indicates whether setting Surface.Color has any visible effect.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsSurfaceAlpha">
            <summary>
            Indicates whether setting Surface.Alpha has any visible effect.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsPixelAlpha">
            <summary>
            Indicates whether the alpha channel in surface pixels is used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.SupportsLighting">
            <summary>
            Indicates whether or not lighting is supported.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.MaxLights">
            <summary>
            Indicates the maximum number of lights which can be used.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.IsHardwareAccelerated">
            <summary>
            Indicates whether there is hardware acceleration available for 2D and 3D drawing.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.IDisplayCaps.Supports3D">
            <summary>
            Indicates whether or not 3D drawing is supported.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.SurfaceImpl">
            <summary>
            Base class for implementing a Surface structure.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.#ctor">
            <summary>
            Constructs a SurfaceImpl object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Dispose">
            <summary>
            Frees unmanaged resources.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should Draw the surface to the screen, ignoring
            all scaling, rotation and alignment state data.
            Color and Alpha are still to be used.
            
            It is recommended to override this method, as the base class
            implementation saves the state, draws, then restores the state.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw a portion of the surface to the screen, ignoring
            all scaling, rotation and alignment state data.
            Color and Alpha are still to be used.
            
            This method must be overriden.
            </summary>
            <param name="srcRect"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw(ERY.AgateLib.Geometry.Point)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object.
            The base class method calls Draw(PointF).
            
            This method may be overriden, if it is convenient to provide an 
            alternate implementation which takes integral drawing values.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw(System.Single,System.Single)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object.
            
            This method must be overriden.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object,
            except for RotationCenter.  Use the point passed for the center
            of rotation.
            
            This method must be overriden.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.DrawPoints(ERY.AgateLib.Geometry.Point[])">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, with the same result
            as if Draw was called once for each Point passed.
            </summary>
            <param name="destPts"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.Draw">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method draws the surface at (0, 0).  The base class implementation
            simply calls Draw(Point.Empty).
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.DrawRects(ERY.AgateLib.Geometry.Rectangle[],ERY.AgateLib.Geometry.Rectangle[])">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, with the same result
            as if Draw was called once for each src and dest rect pairs.
            It should be overridden, to minimize calls across managed/unmanaged boundaries.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.BeginQueueRects">
            <summary>
            Sets up data structures to queue rects to draw to the screen.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.BeginQueueRects(System.Int32)">
            <summary>
            Sets up data structures to queue rects to draw to the screen.
            </summary>
            <param name="guessCount">A good guess for how many rects you are going to draw.</param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.QueueRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Adds a src/dest rectangle pair to the queue.  Make sure to call
            BeginQueueRects first.
            </summary>
            <param name="src_rect"></param>
            <param name="dest_rect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.EndQueueRects">
            <summary>
            Ends adding rects to the queue and draws all of them to the screen.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.SaveTo(System.String,ERY.AgateLib.ImageFileFormat)">
            <summary>
            Saves the surface data to the specified file in the specified format.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.CarveSubSurface(ERY.AgateLib.Surface,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a new SurfaceImpl object which comes from a small sub-rectangle on this surface.
            </summary>
            <param name="surface"></param>
            <param name="srcRect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.SetSourceSurface(ERY.AgateLib.ImplBase.SurfaceImpl,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Used by Display.BuildPackedSurface.
            </summary>
            <param name="surf"></param>
            <param name="srcRect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.ReadPixels(ERY.AgateLib.PixelFormat)">
            <summary>
            Creates a PixelBuffer object with a copy of the pixel data, in the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.ReadPixels(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a PixelBuffer object with a copy of the pixel data in the 
            specified rectangle, in the specified format.
            </summary>
            <param name="format"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.WritePixels(ERY.AgateLib.PixelBuffer)">
            <summary>
            Writes pixel data to the surface.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.WritePixels(ERY.AgateLib.PixelBuffer,ERY.AgateLib.Geometry.Point)">
            <summary>
            Writes pixel data to the surface.
            </summary>
            <param name="buffer"></param>
            <param name="startPoint"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.SetScale(System.Double,System.Double)">
            <summary>
            Sets the amount of scaling when this surface is drawn.  
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the amount of scaling when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle of this surface.
            </summary>
            <param name="radians">Value in radians to increase the rotation by.</param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle of this surface.  Value supplied is in degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsSurfaceBlank">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the value of the AlphaThreshold of the
            display object..
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsSurfaceBlank(System.Int32)">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the given value.
            </summary>
            <param name="alphaThreshold">The alpha value below which to consider 
            a pixel blank.  In the range 0 &lt;= alphaThreshold &lt;= 255.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsRowBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given row are all
            transparent, within the threshold.
            </summary>
            <param name="row">Which row.  Valid range is between 0 and SurfaceSize.Height - 1.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsColumnBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given column are all
            transparent, within the threshold.
            </summary>
            <param name="col">Which column.  Valid range is between 0 and SurfaceSize.Width - 1.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsRowBlankScanARGB(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Scans a memory area to see if it entirely contains pixels which won't be
            seen when drawn.
            </summary>
            <param name="pixelData">Pointer to the data</param>
            <param name="row">Which row to check</param>
            <param name="cols">How many columns to check</param>
            <param name="strideInBytes">The stride of each row</param>
            <param name="alphaThreshold">The maximum value of alpha to consider a pixel transparent.</param>
            <param name="alphaMask">The mask to use to extract the alpha value from the data.</param>
            <param name="alphaShift">How many bits to shift it to get alpha in the range of 0-255.
            For example, if alphaMask = 0xff000000 then alphaShift should be 24.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.IsColBlankScanARGB(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Scans a memory area to see if it entirely contains pixels which won't be
            seen when drawn.
            </summary>
            <param name="pixelData">Pointer to the data</param>
            <param name="col">Which col to check</param>
            <param name="rows">How many columns to check</param>
            <param name="strideInBytes">The stride of each row</param>
            <param name="alphaThreshold">The maximum value of alpha to consider a pixel transparent.</param>
            <param name="alphaMask">The mask to use to extract the alpha value from the data.</param>
            <param name="alphaShift">How many bits to shift it to get alpha in the range of 0-255.
            For example, if alphaMask = 0xff000000 then alphaShift should be 24.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.BeginRender">
            <summary>
            Utility function which can be called by BeginFrame to begin
            a render pass.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.SurfaceImpl.EndRender">
            <summary>
            Utility function which can be called by EndFrame to end a render pass.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.TesselateFactor">
            <summary>
            Gets or sets how many squares the surface should be broken into when drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.IsDisposed">
            <summary>
            Returns true if Dispose() has been called on this surface.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.ShouldBePacked">
            <summary>
            Gets or sets a bool value which indicates whether or not this surface
            should be considered for packing when Display.PackAllSurfaces() is 
            called.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.DisplayWidth">
            <summary>
            Get or sets the width of the surface in pixels when it will be displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.DisplayHeight">
            <summary>
            Gets or sets the height of the surface in pixels when it is displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.DisplaySize">
            <summary>
            Gets or sets the Size of the area used by this surface when displayed on screen.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.Alpha">
            <summary>
            Alpha value for displaying this surface.
            Valid values range from 0.0 (completely transparent) to 1.0 (completely opaque).
            Internally stored as a byte, so granularity is only 1/255.0.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.RotationCenter">
            <summary>
            Gets or sets the point on the surface which is used to rotate around.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.DisplayAlignment">
            <summary>
            Gets or sets the point where the surface is aligned to when drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when this surface is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.Color">
            <summary>
            Gets or sets the multiplicative color for this surface.
            Remember, Color structures have an alpha field, so setting
            this will override any value set by Alpha.  If you want to
            set Alpha separately, set the Alpha property after the 
            SurfaceColor property.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.SurfaceWidth">
            <summary>
            Gets the width of the source surface in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.SurfaceHeight">
            <summary>
            Gets the height of the source surface in pixels.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.SurfaceImpl.SurfaceSize">
            <summary>
            Gets the Size of the source surface in pixels.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Resources.ResourceManager">
            <summary>
            XML ResourceManager.
            
            Implementation is currently very basic.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Resources.ResourceManager.#ctor(System.String)">
            <summary>
            Constructs a ResourceManager from an XML File.
            </summary>
            <param name="xmlFile"></param>
        </member>
        <member name="M:ERY.AgateLib.Resources.ResourceManager.#ctor(System.IO.Stream)">
            <summary>
            Constructs a ResourceManager from a stream containing XML data.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:ERY.AgateLib.Joystick">
            <summary>
            Class which encapsulates a single joystick.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Joystick.GetAxisValue(System.Int32)">
            <summary>
            Gets the current value for the given axis.
            Axis 0 is always the x-axis, axis 1 is always the y-axis on
            controlers which have this capability.
            </summary>
            <param name="axisIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Joystick.Recalibrate">
            <summary>
            Recalibrates this joystick.
            
            Behavior is driver-dependent, however this usually means taking
            the current position as the "zeroed" position for the joystick.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Joystick.Poll">
            <summary>
            Polls the joystick for data.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.AxisCount">
            <summary>
            Gets how many axes are available on this joystick.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.ButtonCount">
            <summary>
            Returns the number of buttons this joystick has.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.Buttons">
            <summary>
            Returns an array indicating whether or not the joystick buttons
            are pushed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.AxisThreshold">
            <summary>
            Values smaller than this value for axes will
            be truncated and returned as zero.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.Xaxis">
            <summary>
            Returns the value of the gamepad x-axis.
            Ranges are:
            -1 all the way to the left
             0 centered
             1 all the way to the right
            
            Values outside this range may be returned.
            Never do tests which expect exact return values.
            Even gamepads will sometimes return values close to 1
            when pushed down, instead of exactly 1.
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.Yaxis">
            <summary>
            Returns the value of the gamepad y-axis.
            Ranges are:
            -1 all the way to the top
             0 centered
             1 all the way to the bottom
            
            Values outside this range may be returned.
            Never do tests which expect exact return values.
            Even gamepads will sometimes return values close to 1
            when pushed down, instead of exactly 1.
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Joystick.PluggedIn">
            <summary>
            Returns whether or not this joystick is plugged in.
            
            If a joystick is removed, you must throw away the reference to 
            this object and get a new one.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PixelFormat">
            <summary>
            Enum which describes different pixel formats.
            Order of the characters in the constant name specifies the
            ordering of the bytes for the pixel data, from least to most significant.
            See remarks for more information.
            </summary>
            <remarks>
            Order of the characters in the constant name specifies the
            ordering of the bytes for the pixel data, from least to most significant on 
            a little-endian architecture.  In other words, the first character indicates
            the meaning of the first byte or bits in memory.
            
            For example, ARGB8888 indicates that the alpha channel is the least significant,
            the blue channel is most significant, and each channel is eight bits long.
            The alpha channel is stored first in memory, followed by red, green and blue.
            </remarks>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.Any">
            <summary>
            Format specifying the Agate should choose what pixel format 
            to use, where appropriate.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.ARGB8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.ABGR8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.BGRA8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.RGBA8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.XRGB8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.XBGR8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.RGB888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.BGR888">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.RGB565">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.XRGB1555">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.XBGR1555">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.PixelFormat.BGR565">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PixelBuffer">
            <summary>
            Class which encapsulates raw pixel data.  This can be used to 
            construct or modify surface data programmatically.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.TestPixelFormatStrides">
            <summary>
            static constructor to test pixel formats.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.#ctor(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size)">
            <summary>
            Constructs a PixelBuffer object. 
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.#ctor(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size,System.Byte[])">
            <summary>
            Constructs a PixelBuffer object. 
            Data passed is not copied; it is referenced.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.  This data will not be copied; it will be
            referenced.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.#ctor(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size,System.Byte[],ERY.AgateLib.PixelFormat)">
            <summary>
            Constructs a PixelBuffer object. 
            This overload performs automatic conversion of the data
            passed to match the format specified for the pixel buffer.
            The data is always copied in memory, even if it is of the
            same type as the format parameter.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.</param>
            <param name="dataFormat">Format of the raw pixel data.  This data will be 
            copied into the PixelBuffer.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.#ctor(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size,System.Byte[],System.Boolean)">
            <summary>
            Constructs a PixelBuffer object. 
            This overload allows you to specify whether or not the 
            data parameter should be copied.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.</param>
            <param name="copyData">True if the data should be copied into the pixel buffer.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.#ctor(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size,System.IntPtr,ERY.AgateLib.PixelFormat,System.Int32)">
            <summary>
            Constructs a PixelBuffer object.  Copies data from an unmanaged memory location
            in the specified format.
            </summary>
            <param name="format">The format the pixel buffer should be stored in.</param>
            <param name="size">The size (width and height) in pixels the pixel buffer
            should contain.</param>
            <param name="data">Pointer to an unmanaged memory location which contains the pixel
            data.  This data must be the same size in pixels as the size parameter.</param>
            <param name="sourceFormat">The pixelformat of the source data.</param>
            <param name="srcRowStride">The number of bytes from the beginning of one row
            to the next.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsBlank">
            <summary>
            Checks to see if this PixelBuffer contains only transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsBlank(System.Double)">
            <summary>
            Checks to see if this PixelBuffer contains only transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsRowBlank(System.Int32)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsRowBlank(System.Int32,System.Double)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="row"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsColumnBlank(System.Int32)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsColumnBlank(System.Int32,System.Double)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="col"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.CopyFrom(ERY.AgateLib.PixelBuffer,ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Copies pixel data from the specified PixelBuffer.
            </summary>
            <param name="buffer">The pixel buffer to copy from.</param>
            <param name="srcRect"></param>
            <param name="destPt"></param>
            <param name="clip">If true, the copied region will automatically
            be clipped.  If false, this method will throw an exception if the area
            being copied to is out of range.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.GetPixelIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of the first byte in the pixel in the Data array
            at the specified point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsPointValid(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified point is within the pixel buffer.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.IsPointValid(ERY.AgateLib.Geometry.Point)">
            <summary>
            Returns true if the specified point is within the pixel buffer.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.GetPixel(System.Int32,System.Int32)">
            <summary>
            Copies pixel data from the specified location to a Color structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.SetPixel(System.Int32,System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Sets the color at a particular pixel.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="clr"></param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.SetData(System.Byte[],ERY.AgateLib.PixelFormat)">
            <summary>
            Copies the data from the array passed in into the internal pixel 
            buffer array. Automatic conversion is performed if the format the data 
            is in (indicated by format parameter) differs from the format the
            pixel buffer is in.
            </summary>
            <param name="data"></param>
            <param name="srcFormat"></param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.SetData(System.IntPtr,ERY.AgateLib.PixelFormat,System.Int32)">
            <summary>
            Copies the data from the unmanaged memory pointer passed in into the internal pixel 
            buffer array. Automatic conversion is performed if the format the data 
            is in (indicated by format parameter) differs from the format the
            pixel buffer is in.
            </summary>
            <param name="data"></param>
            <param name="srcFormat"></param>
            <param name="srcRowStride"></param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.ConvertTo(ERY.AgateLib.PixelFormat)">
            <summary>
            Creates a new PixelBuffer and copies the data in this PixelBuffer,
            performing automatic conversion.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.ConvertTo(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size)">
            <summary>
            Creates a new PixelBuffer of the specified size, with the
            data in this PixelBuffer copied to the upper left corner.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <param name="mTextureSize"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.ConvertTo(ERY.AgateLib.PixelFormat,ERY.AgateLib.Geometry.Size,ERY.AgateLib.Geometry.Point)">
            <summary>
            Creates a new PixelBuffer of the specified size, with the
            data in this PixelBuffer copied so that the upper left corner
            is specified by point.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <param name="mTextureSize"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.SaveTo(System.String,ERY.AgateLib.ImageFileFormat)">
            <summary>
            Saves the data in the PixelBuffer for to an image file.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.ConvertPixel(System.Byte[],System.Int32,ERY.AgateLib.PixelFormat,System.Byte[],System.Int32,ERY.AgateLib.PixelFormat)">
            <summary>
            Converts a single pixel in the specified format at the specified location 
            from the source array and writes it to the specified location in the 
            destination array.
            </summary>
            <param name="dest">Destination array to write to.</param>
            <param name="destIndex">Index in destination array to begin writing.</param>
            <param name="destFormat">Pixel format to use when writing to destination array.</param>
            <param name="src">Source array to read pixel data from</param>
            <param name="srcIndex">Index in source array where pixel data should be read from.</param>
            <param name="srcFormat">The format of the pixel data in the source array.</param>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.GetPixelStride(ERY.AgateLib.PixelFormat)">
            <summary>
            Returns the number of bytes in memory used by a single pixel in the
            specified format.
            </summary>
            <param name="format">Which format to look up.</param>
            <returns>
            The number of bytes used by the format.  This is always
            either 2 for 15 or 16 bit formats, 3 for 24 bit formats, and 4 for
            32 bit formats.
            </returns>
        </member>
        <member name="M:ERY.AgateLib.PixelBuffer.FormatHasAlpha(ERY.AgateLib.PixelFormat)">
            <summary>
            Returns true if the specified PixelFormat contains an
            alpha channel.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.PixelFormat">
            <summary>
            Gets the format of the pixel data.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.Data">
            <summary>
            Gets or sets the raw pixel data, in the format indicated by PixelFormat. 
            An exception is thrown when setting Data if the length of the array passed is 
            not Width * Height * PixelStride.
            The data is not copied, it is only referenced.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.PixelStride">
            <summary>
            Gets how many bytes each pixel takes up in memory.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.Height">
            <summary>
            Returns the height in pixels of the buffer.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.Width">
            <summary>
            Returns the width in pixels of the buffer.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.Size">
            <summary>
            Returns the size (width, height) in pixels of the buffer.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PixelBuffer.RowStride">
            <summary>
            Returns how many bytes a single row takes up. This value can be 
            used to increase an index to go from one line of pixels to the next.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Drivers.DriverInfoList`2">
            <summary>
            Class which contains a list of drivers and the code required to
            instantiate them.
            </summary>
            <typeparam name="TBase">Base class of the main driver class factory. (DisplayImpl, etc.)</typeparam>
            <typeparam name="T">DriverTypeID derived class.  This should emulate an enum.</typeparam>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfoList`2.CreateDriver">
            <summary>
            Instantiates the driver with the highest priority.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Drivers.DriverInfoList`2.CreateDriver(`1)">
            <summary>
            Instantiates the chosen  driver.
            </summary>
            <param name="type">A member of the "enum" class T, usually one
            of the static members of T.</param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Utility.AgateRenderTarget">
            <summary>
            A generic render target control for AgateLib to render to.
            </summary>
            <remarks>
            [Experimental - This class will be moved to into a different assembly
            in the future.]
            </remarks>
        </member>
        <member name="M:ERY.AgateLib.Utility.AgateRenderTarget.#ctor">
            <summary>
            Constructs an AgateRenderTarget.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.AgateRenderTarget.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the base class OnPaint method, to clear the
            client area in the Visual Studio designer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ERY.AgateLib.Utility.AgateRenderTarget.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Utility.AgateRenderTarget.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ERY.AgateLib.Utility.AgateRenderTarget.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputCommand`1">
            <summary>
            Class which encapsulates a set of key codes and joystick buttons that
            all have the same function.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.Update">
            <summary>
            Updates the state of this input command.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.AddKey(ERY.AgateLib.KeyCode)">
            <summary>
            Adds a key to the list of buttons which will trigger this command.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.RemoveKey(ERY.AgateLib.KeyCode)">
            <summary>
            Removes a key from the list of buttons which will trigger this command.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.AddJoystickButton(System.Int32,System.Int32)">
            <summary>
            Adds a joystick button to the list of buttons which will trigger this command.
            </summary>
            <param name="joystickIndex"></param>
            <param name="button"></param>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.RemoveJoystickButton(System.Int32,System.Int32)">
            <summary>
            Removes a joystick button from the list of buttons which trigger this command.
            </summary>
            <param name="joystickIndex"></param>
            <param name="button"></param>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.AddJoystickAxis(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds a joystick axis to the list of buttons which will trigger this command.
            This treats the axis as if it were a gamepad, only responding of the axis moves
            pas a value of 0.5.
            </summary>
            <param name="joystickIndex">The index of the joystick, in Input.Joysticks.</param>
            <param name="axisIndex">The index of the axis.  0 is x-axis, 1 is y-axis.</param>
            <param name="positiveDirection">True if the command responds to the positive
            direction.  For example, with the x-axis, if this is true 
            the command will respond to pushing the joystick to the right.</param>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.SetOn">
            <summary>
            Sets this command as being on, as if a key or button listed in it was pressed.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.InputCommand`1.Clear(System.Boolean)">
            <summary>
            Clears the setting on this command, as if all the keys and joystick buttons
            associated with this command were released.
            </summary>
            <param name="waitForTap">true indicates that this should not fire events or register
            as on until the keys associated with it have been released.</param>
        </member>
        <member name="P:ERY.AgateLib.InputCommand`1.RequireTap">
            <summary>
            Set to true to indicate that this command should not fire another event
            until the key is released and pressed again.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputCommand`1.RaiseEvent">
            <summary>
            Set to true to indicate that this command should fire events when the buttons
            are pressed (and held, according to the RequireTap setting).
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputCommand`1.Value">
            <summary>
            Gets or sets whether this command is "pusshed."
            </summary>
        </member>
        <member name="E:ERY.AgateLib.InputCommand`1.InputCommandActivate">
            <summary>
            Event which fires when this command has been activated, by the user pressing
            an associated button, or calling the SetOn() method.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputCommand`1.JoystickButton">
            <summary>
            Class which represents a button press on a particular joystick.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputCommand`1.JoystickAxis">
            <summary>
            Class which represents a button-like on a particular joystick
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputCommand`1.InputCommandActivateDelegate">
            <summary>
            Delegate for activation of this command.
            </summary>
            <param name="commandIdentifier"></param>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.DisplayImpl">
            <summary>
            Abstract base class for implementing the Display object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.OnRenderTargetChange(ERY.AgateLib.IRenderTarget)">
            <summary>
            Event raised when the current render target is changed.
            </summary>
            <param name="oldRenderTarget"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.OnRenderTargetResize">
            <summary>
            Event raised when the render target is resized.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateDisplayWindow(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a DisplayWindowImpl derived object.
            </summary>
            <param name="title"></param>
            <param name="clientWidth"></param>
            <param name="clientHeight"></param>
            <param name="allowResize"></param>
            <param name="iconFile"></param>
            <param name="startFullscreen"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateDisplayWindow(System.Windows.Forms.Control)">
            <summary>
            Creates a DisplayWindowImpl derived object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateSurface(System.String)">
            <summary>
            Creates a SurfaceImpl derived object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateSurface(ERY.AgateLib.Geometry.Size)">
            <summary>
            Creates a SurfaceImpl derived object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateSurface(System.Int32,System.Int32)">
            <summary>
            Creates a SurfaceImpl derived object.
            Forwards the call to CreateSurface(Size).
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CreateFont(System.String,System.Single,ERY.AgateLib.FontStyle)">
            <summary>
            Creates a FontSurfaceImpl derived object.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.BeginFrame">
            <summary>
            Must be called at the start of each frame.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.EndFrame">
            <summary>
            A version of EndFrame must be called at the end of each frame.
            This version allows the caller to indicate to the implementation whether or
            not it is preferred to wait for the vertical blank to do the drawing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.OnBeginFrame">
            <summary>
            Called by BeginFrame to let the driver know to do its setup stuff for starting
            the next render pass.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.OnEndFrame">
            <summary>
            Called by EndFrame to let the driver know that it's time to swap buffers or whatever
            is required to finish rendering the frame.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.CheckInFrame(System.String)">
            <summary>
            Checks to see whether or not we are currently inside a
            BeginFrame..EndFrame block, and throws an exception if
            we are not.  This is only meant to be called
            from functions which must operate between these calls.  
            </summary>
            <param name="functionName">The name of the calling function, 
            for debugging purposes.</param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.SetDeltaTime(System.Double)">
            <summary>
            Provides a means to set the value returned by DeltaTime.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.SetClipRect(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Set the current clipping rect.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.PushClipRect(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Pushes a clip rect onto the clip rect stack.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.PopClipRect">
            <summary>
            Pops the clip rect and restores the previous clip rect.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.Clear">
            <summary>
            Clears the buffer to black.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.Clear(ERY.AgateLib.Geometry.Color)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.Clear(ERY.AgateLib.Geometry.Color,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            </summary>
            <param name="color"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DrawEllipse(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws an ellipse by making a bunch of connected lines.
            
            Info for developers:
            The base class implements this by calculating points on the circumference of
            the ellipse, then making a call to DrawLines.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two specified end-points.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DrawLine(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two specified endpoints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DrawLines(ERY.AgateLib.Geometry.Point[],ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of connected points.
            
            Info for developers:
            The base class implements this by making several calls to DrawLine.
            You may want to override this one to minimize state changes.
            </summary>
            <param name="pt"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DrawRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.FillRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.BuildPackedSurface(ERY.AgateLib.Geometry.Size,ERY.AgateLib.Utility.SurfacePacker.RectPacker{ERY.AgateLib.Surface})">
            <summary>
            Builds a surface of the specified size, using the information
            generated by the SurfacePacker.
            </summary>
            <param name="size"></param>
            <param name="packedRects"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.EnumScreenModes">
            <summary>
            Enumerates a list of screen modes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.FlushDrawBuffer">
            <summary>
            Flushes the 2D draw buffer, if applicable.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.SetOrthoProjection(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Sets the boundary coordinates of the window.
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayImpl.DoLighting(ERY.AgateLib.LightManager)">
            <summary>
            Gets all the light settings from the LightManager.
            </summary>
            <param name="lights"></param>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.RenderTarget">
            <summary>
            Gets or sets the current render target.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.DefaultSurfaceFormat">
            <summary>
            The pixelformat that created surfaces should use.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.AlphaThreshold">
            <summary>
            Gets or sets the threshold value for alpha transparency below which
            pixels are considered completely transparent, and may not be drawn.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.DeltaTime">
            <summary>
            Gets the amount of time in milliseconds that has passed between this frame
            and the last one.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.FramesPerSecond">
            <summary>
            Gets the framerate
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.MaxSurfaceSize">
            <summary>
            Returns the maximum size a surface object can be.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.VSync">
            <summary>
            Gets or sets VSync flag.
            There is no need to call base.VSync if overriding this member.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayImpl.Caps">
            <summary>
            Gets the capabilities of the Display object.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.PlatformSpecific.X11Platform">
            <summary>
            Contains X11 platform specific methods.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.PlatformSpecific.X11Platform.#ctor">
            <summary>
            Constructs the X11 platform methods.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.PlatformSpecific.X11Platform.IsAppIdle">
            <summary>
            Returns whether or not the application is idle; that is, if there are no messages
            waiting to be processed.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.NullSoundImpl">
            <summary>
            Class which provides a silent Audio implementation.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.Register">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.CreateSoundBuffer(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.CreateMusic(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.CreateSoundBufferSession(ERY.AgateLib.ImplBase.SoundBufferImpl)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.NullSoundImpl.NullSoundBufferImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullSoundBufferImpl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullSoundBufferImpl.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.Play">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.Pan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullSoundBufferSessionImpl.IsPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.NullSoundImpl.NullMusicImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullMusicImpl.OnSetLoop(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullMusicImpl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullMusicImpl.Play">
            <summary>
            
            </summary>
        </member>
        <member name="M:ERY.AgateLib.NullSoundImpl.NullMusicImpl.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullMusicImpl.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullMusicImpl.Pan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.NullSoundImpl.NullMusicImpl.IsPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="T:ERY.AgateLib.KeyCode">
            <summary>
            An enumeration of all possible key values.
            These values (mostly) correspond to the values used in System.Windows.Forms.Keys
            in .NET 2.0.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BackSpace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Tab">
            <summary>
            Tab key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LineFeed">
            <summary>
            Dunno what this is.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Clear">
            <summary>
            Dunno what this is.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Return">
            <summary>
            Return key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Enter">
            <summary>
            Enter key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Pause">
            <summary>
            Pause Key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.CapsLock">
            <summary>
            Caps Lock key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Escape">
            <summary>
            Escape key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Space">
            <summary>
            Space bar.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.PageUp">
            <summary>
            PageUp key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.PageDown">
            <summary>
            PageDown key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.End">
            <summary>
            End key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Left">
            <summary>
            Left Arrow key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Up">
            <summary>
            Up Arrow key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Right">
            <summary>
            Right arrow key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Down">
            <summary>
            Down arrow key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Select">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Print">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Execute">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.PrintScreen">
            <summary>
            PrintScreen key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Insert">
            <summary>
            Insert key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Delete">
            <summary>
            Delete key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Help">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D0">
            <summary>
            Zero key on main keyboard.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D1">
            <summary>
            One key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D2">
            <summary>
            Two key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D3">
            <summary>
            Three key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D4">
            <summary>
            Four key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D5">
            <summary>
            Five key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D6">
            <summary>
            Six key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D7">
            <summary>
            Seven key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D8">
            <summary>
            Eight key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D9">
            <summary>
            Nine key on main keyboard
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LWin">
            <summary>
            Left windows key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.RWin">
            <summary>
            Right windows key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Apps">
            <summary>
            Menu key, usually between right windows key and right control key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Sleep">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad0">
            <summary>
            Numeric keypad key 0
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad1">
            <summary>
            Numeric keypad key 1
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad2">
            <summary>
            Numeric keypad key 2
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad3">
            <summary>
            Numeric keypad key 3
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad4">
            <summary>
            Numeric keypad key 4
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad5">
            <summary>
            Numeric keypad key 5
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad6">
            <summary>
            Numeric keypad key 6
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad7">
            <summary>
            Numeric keypad key 7
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad8">
            <summary>
            Numeric keypad key 8
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPad9">
            <summary>
            Numeric keypad key 9
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPadMultiply">
            <summary>
            Numeric keypad key *
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPadPlus">
            <summary>
            Numeric keypad key +
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Separator">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPadMinus">
            <summary>
            Numeric keypad key -
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPadPeriod">
            <summary>
            Numeric keypad key period
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumPadSlash">
            <summary>
            Numeric keypad key /
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F1">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F2">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F3">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F4">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F5">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F6">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F7">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F8">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F9">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F10">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F11">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F12">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F13">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F14">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F15">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F16">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F17">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F18">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F19">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F20">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F21">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F22">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F23">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.F24">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.NumLock">
            <summary>
            NumLock key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Scroll">
            <summary>
            Scroll Lock key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LShiftKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.RShiftKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LControlKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.RControlKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.RMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserBack">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserSearch">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserFavorites">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BrowserHome">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.VolumeMute">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.VolumeDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.VolumeUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.MediaNextTrack">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.MediaPreviousTrack">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.MediaStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.MediaPlayPause">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LaunchMail">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.SelectMedia">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LaunchApplication1">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.LaunchApplication2">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Semicolon">
            <summary>
            Semicolon key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Oem1">
            <summary>
            
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Plus">
            <summary>
            Plus and equals key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Comma">
            <summary>
            Comma and less-than key. 
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Minus">
            <summary>
            Minus and underscore key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Period">
            <summary>
            Period and greater-than key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Slash">
            <summary>
            Slash and question mark key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Tilde">
            <summary>
            Left angled quote and tilde key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.OpenBracket">
            <summary>
            Open bracket and brace key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.BackSlash">
            <summary>
            Backslash and pipe key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.CloseBracket">
            <summary>
            Close bracket and brace key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Quotes">
            <summary>
            Single and double quotes key.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Oem8">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Shift">
            <summary>
            Shift key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Control">
            <summary>
            Control key
            </summary>
        </member>
        <member name="F:ERY.AgateLib.KeyCode.Alt">
            <summary>
            Alt key
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputEventHandler">
            <summary>
            Event handler event type.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:ERY.AgateLib.KeyModifiers">
            <summary>
            Structure which keeps track of modifier keys applied to
            other keys.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.KeyModifiers.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a KeyModifiers structure with the given
            state of the alt, control and shift keys.
            </summary>
            <param name="alt"></param>
            <param name="control"></param>
            <param name="shift"></param>
        </member>
        <member name="P:ERY.AgateLib.KeyModifiers.Alt">
            <summary>
            Gets or sets the state of the Alt key.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.KeyModifiers.Control">
            <summary>
            Gets or sets the state of the Control key.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.KeyModifiers.Shift">
            <summary>
            Gets or sets the state of the Shift key.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.InputEventArgs">
            <summary>
            Class which describes details about an input event.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputEventArgs.KeyID">
            <summary>
            Gets which key was pressed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputEventArgs.KeyString">
            <summary>
            Gets the text created by the key which was pressed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputEventArgs.MousePosition">
            <summary>
            The mouse position during this event
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputEventArgs.RepeatCount">
            <summary>
            Gets how many times the keypress has been repeated.
            This is zero for the first time a key is pressed, and increases
            as the key is held down and KeyDown events are generated after that.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.InputEventArgs.MouseButtons">
            <summary>
            Gets which mouse buttons were pressed.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Keyboard">
            <summary>
            Static class which represents Keyboard input.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.ReleaseAllKeys">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            
            This also makes it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.ReleaseAllKeys(System.Boolean)">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            <para>
            This can also make it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </para>
            </summary>
            <param name="waitForKeyUp">If true, then keys currently depressed will 
            not generate KeyDown events until they are released.</param>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.ReleaseKey(ERY.AgateLib.KeyCode)">
            <summary>
            Resets a particular key to being in the up state (not pushed).  
            Generates a KeyUp event for that key.
            <para>
            This also makes it so that the key must be physically depressed by the user
            before it will register a KeyDown event again.  If it is already depressed,
            it must be released first.
            </para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.ReleaseKey(ERY.AgateLib.KeyCode,System.Boolean)">
            <summary>
            Resets a particular key to being in the up state (not pushed).  
            Generates a KeyUp event for that key.
            </summary>
            <param name="key">The key to be released.</param>
            <param name="waitForKeyUp">If true, then keys currently depressed will 
            not generate KeyDown events until they are released.</param>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.ClearAllKeys">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            
            Deprecated.  Use ReleaseAllKeys(false) instead.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.GetKeyString(ERY.AgateLib.KeyCode,ERY.AgateLib.KeyModifiers)">
            <summary>
            Creates a string from the specified KeyCode and KeyModifiers.
            </summary>
            <param name="keyID"></param>
            <param name="mods"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.Keyboard.Keys">
            <summary>
            Gets an object representing the state of all keys on the keyboard.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Keyboard.AnyKeyPressed">
            <summary>
            Checks to see if the user pressed the "Any" key.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Keyboard.KeyDown">
            <summary>
            Event which occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Keyboard.KeyUp">
            <summary>
            Event which occurs when a key is released.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Keyboard.KeyState">
            <summary>
            Class which represents the state of all keys on the keyboard.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.KeyState.ReleaseKey(ERY.AgateLib.KeyCode,System.Boolean)">
            <summary>
            Clears the key-down status of a key, and generates a KeyUp event.  
            If waitKeyUp is true, the key is marked so that KeydDown events will not be generated until 
            it has been physically released by the user.
            </summary>
            <param name="id">KeyCode identifier of key to release.</param>
            <param name="waitKeyUp">Boolean flag indicating whether or not
            keydown events should be suppressed until the key is physically released.</param>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.KeyState.GetWinFormsKey(System.Windows.Forms.Keys)">
            <summary>
            Gets the state of a key using the System.Windows.Forms.Keys enum values.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.KeyState.SetWinFormsKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Sets the state of a key using the System.Windows.Forms.Keys enum values.
            Used by Forms to respond to key events.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.KeyState.TransformWinFormsKey(System.Windows.Forms.Keys)">
            <summary>
            Converts a System.Windows.Forms.Keys value to a KeyCode value.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Keyboard.KeyState.ReleaseAllKeys(System.Boolean)">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            
            This also makes it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Keyboard.KeyState.Item(ERY.AgateLib.KeyCode)">
            <summary>
            Gets or sets the state of the given key.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ERY.AgateLib.SpriteContainer`1">
            <summary>
            A generic class which is used to contain multiple animation sequences (sprites).
            You provide your own key for identifying sprites.  Typically, T should be some
            enum type which specifies all of the animations used by a particular object.
            
            A SpriteContainer&lt;T&gt; implements the IDictionary&lt;T, Sprite&gt; interface,
            so it can be thought of as a dictionary of animations.  It also contains state 
            information like what the current sprite is.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.AddSprite(`0,System.String,System.Int32,System.Int32)">
            <summary>
            Adds an animation sequence to the list.  This automatically creates
            a new Sprite object, passing the filename and width and height of a frame
            to it.
            </summary>
            <param name="key">The key value for this animation sequence.</param>
            <param name="filename">Filename to load animation files from</param>
            <param name="width">Width in pixels of a single frame.</param>
            <param name="height">Height in pixels of a single frame.</param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.SetCurrentSprite(`0,System.Boolean)">
            <summary>
            Sets the currently displayed sprite for this collection.
            Returns true if the key was present, false if the key was not found.
            </summary>
            <param name="key">The key to set for the current sprite.</param>
            <param name="beginAnimation">True to restart the animation.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.SetCurrentSprite(`0[],System.Boolean)">
            <summary>
            Sets the currently displayed sprite for this collection.
            Returns true if either the key or the default key was set.
            </summary>
            <param name="keys">An array of keys to try setting to.</param>
            <param name="beginAnimation">True to restart the animation.</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Update">
            <summary>
            Calls Update on each of the sprites in the collection.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Update(System.Double)">
            <summary>
            Updates the animation of all contained sprites, using the given frame time.
            </summary>
            <param name="time_ms">The amount of time to consider passed, in milliseconds.</param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the current sprite at the specified destination.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Draw(ERY.AgateLib.Geometry.Point)">
            <summary>
            Draws the current sprite at the specified destination point.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Draw(System.Single,System.Single)">
            <summary>
            Draws the current sprite at the specified destination point.
            </summary>
            <param name="dest_x"></param>
            <param name="dest_y"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Draw(ERY.AgateLib.Geometry.PointF)">
            <summary>
            Draws the current sprite at the specified destination point.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale factor for all sprites in this collection.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Add(`0,ERY.AgateLib.Sprite)">
            <summary>
            Adds a sprite to the collection, for the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.ContainsKey(`0)">
            <summary>
            Checks to see if the collection contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Remove(`0)">
            <summary>
            Removes a Sprite from this collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.TryGetValue(`0,ERY.AgateLib.Sprite@)">
            <summary>
            Tries to get the value of the Sprite at the specified key, returning
            true if successful.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.Clear">
            <summary>
            Clears all sprites from this collection.
            Sprites are not disposed of.  If you want them disposed, call
            DisposeAllSprites() first.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.GetEnumerator">
            <summary>
            Enumerates through KeyValuePair&lt;T, Sprite&gt; objects in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.SpriteContainer`1.DisposeAllSprites">
            <summary>
            Disposes of all sprites in the collection.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.Item(`0)">
            <summary>
            Gets the sprite object corresponding to the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.CurrentSprite">
            <summary>
            Gets the current sprite object.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.CurrentSpriteKey">
            <summary>
            Returns the key value for the current sprite.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.DisplayAlignment">
            <summary>
            Sets the display alignment property for all sprites in this collection.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.Keys">
            <summary>
            Returns a collection of all the keys contained in this SpriteContainer
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.Values">
            <summary>
            Returns a collection of all the Sprites in this collection.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.System#Collections#Generic#IDictionary{T@ERY#AgateLib#Sprite}#Item(`0)">
            <summary>
            Gets or sets the Sprite at the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.Count">
            <summary>
            Returns how many items are contained.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.SpriteContainer`1.IsReadOnly">
            <summary>
            This is always false.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Timing">
            <summary>
            Static class which handles timing.  This is often used
            to update object positions and animations.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.Pause">
            <summary>
            Increments the pause counter.
            If the counter is greater than zero, the timer won't advance.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.Resume">
            <summary>
            Decrements the pause counter.
            If the pause counter is zero the timer will begin advancing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.ForceResume">
            <summary>
            Sets the pause counter to zero, causing the timer to begin advancing
            regardless of how many calls to Pause() are made.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.PauseAllTimers">
            <summary>
            Calls Pause() on all timers, and fires the PauseAllTimersEvent.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.ResumeAllTimers">
            <summary>
            Calls Resume() on all timers, and fires the ResumeAllTimersEvent.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.ForceResumeAllTimers">
            <summary>
            Calls ForceResume on all timers, and fires the ResumeAllTimersEvent.
            You probably don't want to use this one much.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Timing.TotalSeconds">
            <summary>
            Returns the number of seconds since the application started.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Timing.TotalMilliseconds">
            <summary>
            Returns the number of milliseconds since the application started.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Timing.StopWatch">
            <summary>
            Class which represents a StopWatch.
            A StopWatch can be paused and reset independently of other
            StopWatches.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.#ctor">
            <summary>
            Constructs a timer object, and immediately begins 
            keeping track of time.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.#ctor(System.Boolean)">
            <summary>
            Constructs a timer object.
            If the timer starts paused, a call to Resume() must be made
            for it to begin keeping track of time.
            </summary>
            <param name="autostart">Pass true to immediately begin keeping track of time.
            False to pause the timer initially.</param>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.Dispose">
            <summary>
            Destroys this timer.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.Reset">
            <summary>
            Resets the timer to zero.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.Pause">
            <summary>
            Increments the pause counter.
            If the counter is greater than zero, the timer won't advance.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.Resume">
            <summary>
            Decrements the pause counter.
            If the pause counter is zero the timer will begin advancing.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Timing.StopWatch.ForceResume">
            <summary>
            Sets the pause counter to zero, causing the timer to begin advancing
            regardless of how many calls to Pause() are made.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Timing.StopWatch.TotalSeconds">
            <summary>
            Returns the number of seconds since the timer started.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Timing.StopWatch.TotalMilliseconds">
            <summary>
            Returns the number of ticks (milliseconds) since the timer started.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Timing.StopWatch.IsPaused">
            <summary>
            Gets whether or not this StopWatch is paused.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.AgateSetup">
            <summary>
            Class which is designed to simplify initialization and de-initialization of the
            library.  It is recommended to have a Setup object in a using block around your game
            code so that calling Dispose is guaranteed.
            
            If the program arguments are supplied, you can allow the user to choose which drivers
            are used, if the --choose option is specified.
            
            <example>This example shows a typical development pattern for the use of an AgateSetup object.
            <code>
            using System;
            using System.Collections.Generic;
            using ERY.AgateLib;
            
            public static void Main(string[] args)
            {
                using(AgateSetup setup = new AgateSetup("My Application Name", args))
                {
                    setup.InitializeAll();
                    if (setup.Cancel)
                        return;
            
                    // TODO: write game here
                }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.#ctor">
            <summary>
            Constructs a Setup object.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.#ctor(System.String)">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.#ctor(System.String[])">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="args">Command line arguments to the program.</param>        
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.#ctor(System.String,System.String[])">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="title"></param>
            <param name="args">Command line arguments to the program.</param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.Initialize(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the specified components.  This sets the values of UseDisplay,
            UseAudio, and UseInput to the values passed in.
            </summary>
            <param name="display"></param>
            <param name="audio"></param>
            <param name="input"></param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeAll">
            <summary>
            Initializes the Display, Audio and Input controllers.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeDisplay">
            <summary>
            Initializes the display.
            Automatically selects the driver to use, or asks the user which
            driver to use if appropriate.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeDisplay(ERY.AgateLib.Drivers.DisplayTypeID)">
            <summary>
            Initializes the display to the specified subsystem.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeAudio">
            <summary>
            Initializes the Audio subsystem.
            Automatically picks which driver to use.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeAudio(ERY.AgateLib.Drivers.AudioTypeID)">
            <summary>
            Initializes the Audio subsystem, to the specified driver.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeInput">
            <summary>
            Initializes the Input subsystem.
            Automatically picks which driver to use.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.InitializeInput(ERY.AgateLib.Drivers.InputTypeID)">
            <summary>
            Initializes the Input subsystem, to the specified driver.
            </summary>
            <param name="inputTypeID"></param>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.Dispose">
            <summary>
            Disposes of the SetupDisplay object and all initialized sub-systems.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.AgateSetup.DoAskUser">
            <summary>
            Checks to see whether or not the user needs to be asked, and asks them
            if so.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.AgateSetup.Cancel">
            <summary>
            Returns true if the user hit cancel in any dialog box that showed up
            asking the user what driver to use, or if initialization failed.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.AgateSetup.AskUser">
            <summary>
            Gets or sets a bool value which indicates whether or not the user
            should be asked which driver(s) to use when Agate is initialized.
            </summary>
            <remarks>
            This setting can be useful for debugging, especially when comparing 
            OpenGL vs. DirectX behavior and performance.  
            It is recommended to have AskUser turned off for release builds, however.
            </remarks>
        </member>
        <member name="P:ERY.AgateLib.AgateSetup.UseDisplay">
            <summary>
            Gets or sets a bool value which indicates whether or not the display
            should be initialized.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.AgateSetup.UseAudio">
            <summary>
            Gets or sets a bool value which indicates whether or not the audio system
            should be initialized.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.AgateSetup.UseInput">
            <summary>
            Gets or sets a bool value which indicates whether or not the input system
            should be initialized.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Display">
            <summary>
            Static class which contains all basic functions for drawing onto the display.
            This class is most central to game rendering.  At the beginning and end of each frame
            Display.BeginFrame() and Display.EndFrame() must be called.  All drawing calls must
            occur between BeginFrame and EndFrame.
            
            Display.Dispose() must be called before the program exits.
            
            </summary>
            
            <example> This example shows how a basic render loop works.
            <code>
            void MyRenderLoop()
            {
                Display.BeginFrame();
                Display.Clear(Color.Black);
            
                Display.DrawRect(new Rectangle(10, 10, 30, 30), Color.Red);
            
                Display.EndFrame();
                Core.KeepAlive();
            }
            </code>
            </example>
        </member>
        <member name="M:ERY.AgateLib.Display.Initialize(ERY.AgateLib.Drivers.DisplayTypeID)">
            <summary>
            Initializes the display by instantiating the driver with the given
            DisplayTypeID.  The display driver must be registered with the Registrar
            class.
            
            It is recommended that you instantiate a SetupDisplay object from within
            a using block, to ensure that the Display is disposed of properly.
            </summary>
            <param name="displayType"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.Dispose">
            <summary>
            Disposes of the display.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.FindQualifiedPath(System.String)">
            <summary>
            Searches for the fully qualified path for the specified file, in the following order:
            1. Look in current directory
            2. Look in ImagePath
            </summary>
            <param name="imageFileName">Filename to search for</param>
            <returns></returns>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear">
            <summary>
            Clears the buffer to black.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="a">Alpha value</param>
            <param name="b">Blue value</param>
            <param name="g">Green value</param>
            <param name="r">Red value</param>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear(ERY.AgateLib.Geometry.Color)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear(System.Int32)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear(ERY.AgateLib.Geometry.Color,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            Should be essentially the same as DrawRect(dest, color), except
            that alpha is not significant in the use of Clear.
            </summary>
            <param name="color"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.Clear(System.Int32,ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            Should be essentially the same as DrawRect(dest, color), except
            that alpha is not significant in the use of Clear.
            </summary>
            <param name="color"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.BeginFrame">
            <summary>
            Must be called at the start of each frame.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.EndFrame">
            <summary>
            EndFrame must be called at the end of each frame.
            By default, this waits for the vertical blank before rendering.
            However, some renderers (ie. System.Drawing) may not support that. 
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.EndFrame(System.Boolean)">
            <summary>
            A version of EndFrame must be called at the end of each frame.
            This version allows the caller to indicate to the driver whether 
            it is preferred to wait for the vertical blank to do the drawing.
            The driver may or may not honor the value of waitVSync.
            </summary>
            <param name="waitVSync"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.SetDeltaTime(System.Double)">
            <summary>
            Provides a means to set the value returned by DeltaTime.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.SetClipRect(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Set the current clipping rect.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.PushClipRect(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Pushes a clip rect onto the clip rect stack.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.PopClipRect">
            <summary>
            Pops the clip rect and restores the previous clip rect.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.PackAllSurfaces">
            <summary>
            Takes all surfaces and packs them into a large surface.
            This should minimize swapping of surfaces, and may result in a performance
            increase when using Direct3D or OpenGL.  
            
            If you use this, it is best to load all your surfaces into memory, 
            mark any you don't want packed (surfaces which may be used as render targets,
            for example), then call Display.PackAllSurfaces().
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.EnumScreenModes">
            <summary>
            Returns an array containing information about all available full-screen modes.
            If full screen mode switching is not supported, the array returned has a
            Length of zero.
            </summary>
            <returns>An array of available full-screen modes.</returns>
        </member>
        <member name="M:ERY.AgateLib.Display.FlushDrawBuffer">
            <summary>
            When using Direct3D or OpenGL, calls to Surface.Draw are cached to be sent to 
            the 3D API all as a batch.  Calling Display.FlushDrawBuffer forces all cached
            vertices to be sent to the rendering system.  You should not need to call this
            function in normal operation of your application.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Display.SetOrthoProjection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the orthogonal projection for rendering.  This allows redefinition of the
            coordinates used to address pixels in the window.  
            </summary>
            <remarks>
            [Experimental - This member is not fully tested and may have bugs.
            The API is also likely to change in the future.]
            <para>Normally, the orthogonal projection used is 
            set to (left, top) = (0,0), (right,bottom) = (RenderTarget.Width, RenderTarget.Height).
            This function provides a handy way to program an application for multiple resolutions.
            For example, if you set the OrthoProjection to (0,0,640,480), then all drawing calls
            can be made as if you were drawing to a 640x480 window, but they would be scaled to fill
            the entire window.</para>
            </remarks>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.SetOrthoProjection(ERY.AgateLib.Geometry.Rectangle)">
            <summary>
            Sets the orthogonal projection for rendering.  This allows redefinition of the
            coordinates used to address pixels in the window.  
            </summary>
            <remarks>
            [Experimental - This member is not fully tested and may have bugs.
            The API is also likely to change in the future.]
            <para>Normally, the orthogonal projection used is 
            set to (left, top) = (0,0), (right,bottom) = (RenderTarget.Width, RenderTarget.Height).
            This function provides a handy way to program an application for multiple resolutions.
            For example, if you set the OrthoProjection to (0,0,640,480), then all drawing calls
            can be made as if you were drawing to a 640x480 window, but they would be scaled to fill
            the entire window.</para>
            </remarks>
            <param name="region"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawEllipse(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws an ellispe within the specified rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two points specified.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawLine(ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Point,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two points specified.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawLines(ERY.AgateLib.Geometry.Point[],ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of connected lines.  The last point and the
            first point are not connected.
            </summary>
            <param name="pts"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.FillRect(ERY.AgateLib.Geometry.Rectangle,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,ERY.AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="M:ERY.AgateLib.Display.DisableLighting">
            <summary>
            Turns lighting functions off.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.Impl">
            <summary>
            Gets the object which handles all of the actual calls to Display functions.
            This may be cast to a surface object in whatever rendering library
            is being used (eg. if using the MDX_1_1 library, this can be cast
            to an MDX1_Display object).  You only need to use this if you
            want to access features which are specific to the graphics library
            you're using.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Display.DisposeDisplay">
            <summary>
            Event that is called when Display.Dispose() is invoked, to shut down the
            display system and release all resources.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.DefaultSurfaceFormat">
            <summary>
            Returns the PixelFormat of Surfaces which are created to be compatible
            with the display mode.  If you want to create a PixelBuffer which does
            not require a conversion when written to a Surface, use this format.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.RenderTarget">
            <summary>
            Gets or sets the current render target.
            Must be called outside of BeginFrame..EndFrame blocks
            (usually just before BeginFrame).
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.CurrentWindow">
            <summary>
            Gets the last render target used which was a DisplayWindow.
            
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.AlphaThreshold">
            <summary>
            Gets or sets the threshold value for alpha transparency below which
            pixels are considered completely transparent, and may not be drawn.
            Acceptable values are within the range of 0 to 1.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.DeltaTime">
            <summary>
            Gets the amount of time in milliseconds that has passed between this frame
            and the last one.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.FramesPerSecond">
            <summary>
            Gets the framerate
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.MaxSurfaceSize">
            <summary>
            Returns the maximum size a surface object can be.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.SurfacePacker">
            <summary>
            Gets the object which handles packing of all surfaces.
            </summary>
        </member>
        <member name="E:ERY.AgateLib.Display.PackAllSurfacesEvent">
            <summary>
            Event fired when PackAllSurfacesEvent
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.VSync">
            <summary>
            Gets or sets the VSync flag.  If VSync is off, tearing might occur.
            If VSync is on, the framerate will be capped at the monitor's refresh rate.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Display.Caps">
            <summary>
            Gets the capabilities of the Display object.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Display.DisposeDisplayHandler">
            <summary>
            Delegate type for functions which are called when Display.Dispose is called
            at the end of execution of the program.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ImplBase.DisplayWindowImpl">
            <summary>
            Implementation of DisplayWindow class.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.ToggleFullScreen">
            <summary>
            Toggles windowed/fullscreen.
            If this is unsupported, this method should silently return
            (do not throw an error).
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.ToggleFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Toggles windowed/fullscreen.
            If this is unsupported, this method should silently return
            (do not throw an error).
            
            Attempts to match width, height and bpp as best as possible.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.SetWindowed">
            <summary>
            Sets the display to windowed.  Does nothing if the display is already
            windowed.  The DisplayWindow retains the same height and width as the
            previous full screen resolution.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.SetFullScreen">
            <summary>
            Sets the display to a full screen display.  This overload should use the
            same resolution as the desktop environment.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.SetFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the display to a full screen display.  The resolution chosen is 
            driver/video card/monitor dependent, but it should be fairly close to
            values specified.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.InitializeWindowsForm(System.Windows.Forms.Form@,System.Windows.Forms.Control@,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a System.Windows.Forms.Form object for rendering to.
            </summary>
            <param name="frm">Returns the created form.</param>
            <param name="renderTarget">Returns the control which is rendered into.</param>
            <param name="title">Title of the window.</param>
            <param name="clientWidth">Width of client area, in pixels.</param>
            <param name="clientHeight">Height of client area, in pixels.</param>
            <param name="startFullscreen">True if we should start with a full-screen window.</param>
            <param name="allowResize">True if we should allow the user to resize the window.</param>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.BeginRender">
            <summary>
            Utility function which may be called by the DisplayImpl when 
            rendering begins.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.ImplBase.DisplayWindowImpl.EndRender">
            <summary>
            Utility function which may be called by the DisplayImpl when 
            rendering is done.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.IsClosed">
            <summary>
            Returns true if the DisplayWindowImpl has been closed.
            This happens if the user clicks the close box, or Dispose is called.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.IsFullScreen">
            <summary>
            Returns true if this DisplayWindowImpl is being used as a full-screen
            device.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.Size">
            <summary>
            Gets or sets the size of the render area.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.Width">
            <summary>
            Gets or sets the width of the render area.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.Height">
            <summary>
            Gets or sets the height of the render area.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.Title">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.ImplBase.DisplayWindowImpl.MousePosition">
            <summary>
            Gets or sets the mouse position within the render area.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.ErrorLevel">
            <summary>
            Used by AgateLib.Core class's error reporting functions
            to indicate how severe an error is.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ErrorLevel.Comment">
            <summary>
            Indicates an message is just a comment, and safe to ignore.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ErrorLevel.Warning">
            <summary>
            Indicates that the error message is not severe, and the program may
            continue.  However, unexpected behavior may occur due to the result of
            this error.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ErrorLevel.Fatal">
            <summary>
            Indicates that the error condition is too severe and the program 
            may not continue.
            </summary>
        </member>
        <member name="F:ERY.AgateLib.ErrorLevel.Bug">
            <summary>
            Indicates the error condition indicates some assumption
            has not held that should have.  This should only be used
            if the condition is caused by a bug in the code.
            </summary>
        </member>
        <member name="T:ERY.AgateLib.Core">
            <summary>
            Class which contains objects commonly used by the entire library.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Core.Initialize">
            <summary>
            Initializes Core class.
            Can be called multiple times.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Core.KeepAlive">
            <summary>
            Plays nice with the OS, by allowing events to be handled.
            This also handles user input events associated with the application,
            and polls joysticks if needed.
            </summary>
        </member>
        <member name="M:ERY.AgateLib.Core.ReportError(System.Exception,ERY.AgateLib.ErrorLevel)">
            <summary>
            Saves an error message to the ErrorFile.
            Outputs a stack trace and shows a dialog box if the ErrorLevel is Bug or Fatal.
            </summary>
            <param name="e"></param>
            <param name="level"></param>
        </member>
        <member name="M:ERY.AgateLib.Core.ReportError(ERY.AgateLib.ErrorLevel,System.String,System.Exception)">
            <summary>
            Saves an error message to the ErrorFile.
            Outputs a stack trace and shows a dialog box if the ErrorLevel 
            is Bug or Fatal.
            </summary>
            <param name="message">A message to print out before the 
            exception's message.</param>
            <param name="e"></param>
            <param name="level"></param>
        </member>
        <member name="M:ERY.AgateLib.Core.ReportError(ERY.AgateLib.ErrorLevel,System.String,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Saves an error message to the ErrorFile.
            </summary>
            <param name="message">A message to print out before the 
            exception's message.</param>
            <param name="e"></param>
            <param name="level"></param>
            <param name="printStackTrace">Bool value indicating whether or not 
            a stack trace should be written out.  </param>
            <param name="showDialog">Bool value indicating whether or not a 
            message box should pop up with an OK button, informing the user about the 
            error.  If false, the error is silently written to the ErrorFile.</param>
        </member>
        <member name="P:ERY.AgateLib.Core.Platform">
            <summary>
            Gets platform-specific methods.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Core.IsActive">
            <summary>
            Gets or sets a bool value which indicates whether or not your
            app is the focused window.  This will be automatically set if
            you created DisplayWindows by specifying a title and size, but not
            if they are attached to a control.
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Core.AutoPause">
            <summary>
            Gets or sets a bool value indicating whether or not Agate
            should automatically pause execution when the application
            loses focus.
            
            The automatic pause will occur during Core.KeepAlive().  This
            will prevent the DisplayWindow from being updated at all.  As 
            such, this should not be used in production builds if your app
            is windowed.  Instead check the IsActive property and respond 
            accordingly if your application is windowed..
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Core.ErrorFile">
            <summary>
            Gets or sets the file name to which errors are recorded.  Defaults
            to "errorlog.txt"
            </summary>
        </member>
        <member name="P:ERY.AgateLib.Core.AutoStackTrace">
            <summary>
            Gets or sets whether or not a stack trace is automatically used.
            </summary>
            <example>
            You may find it useful to turn this on during a debug build, and
            then turn if off when building the release version.  The following
            code accomplishes that.
            <code>
            #if _DEBUG
                ERY.AgateLib.Core.AutoStackTrace = true;
            #endif
            </code>
            </example>
        </member>
    </members>
</doc>
