
TODO:
テラインに峰の方向を持たせるようにしなくては。

World.ProvisionalDistrictクラスの実装
→テラインマップから、実際の地形データを生成

DistrictFactory(=マップの実体を生成する部分)は、
交換は考えなくてもよいだろう。
広範囲のマップで効率のよいデータ保持を行うには？

アイデア:
地形の増減は1,2,4,8(頂点位置は0,n,2nの組み合わせのみ）
合わない部分は断崖にしたり、周りを底上げしたり。

PictureManagerがキャッシュを実装する？→キャッシュのヘルパを用意
SpriteクラスがFilterクラスを呼び出し、生成画をキャッシュに保存する。
イメージのID検索：
・他のコントリビューションから
・デシリアライズ
→デシリアライズの際に、キャッシュに無ければ生成しなければならない。
　生成するのはコントリビューション？ピクチャー？

マップ容量節約のため、ボクセル配列は[x,y,z]→[x,y]とする。
この配列は、地価データなど数値データと、ストラクチャ配列の参照を持つ。
z方向のスタックは、ストラクチャ配列に持たせるため、配列の次元は二次元
ただし、描画時には、表示範囲のみ3次元配列に展開して、重ね合わせ判定に使用する。


memo:
Q.いつフィルタを掛けるか。
A.OffScreenSerfaceを更新時に。
↓
OffScreen上でビット操作できるか？

memo:
NFT.DirectDraw描画スピードテスト
■ノーマル：
x2:	186,199,197 (R:168,181,182)
x1:	071,073,074 (R:068,070,071)
xH:	074,074,077 (R:073,073,074)
xQ: 070,070,070 (R:070,069,070)
■交差描画：
x2:098,224,198
x1:093,105,104
xH:078,082,082
■焼きこみカラー：
x2:100,323,240
x1:096,170,138
xH:078,100,092
■明るい方：
x2:107,370,259
x1:097,128,119
xH:078,087,087
■単色：
x2:106,490,330
x1:101,343,241
xH:079,143,119
■AlphaBlenderClass(比較用)：
x1:	100,123,116
■半透明：
x2:097,256,192 (R:098,253,190)
x1:093,110,107 (R:093,109,106)
xH:077,083,083 (R:077,083,082)
■半透明(関数呼出)：
x1:097,140,124


■優先度：高■
ClockEvent指定時間の最少単位を決める必要あり。それより大きくTickを進めるときは
最小単位に分割してループで回して各Queueを巡回する必要あり。
Ｚバッファを使った２Ｄ描画は可能か？
OverrideTableもコントリビューション化しよう。
気候を定義するクラス、→季節オーバーライドを定義。パーサー、画像保持配列
■優先度：中■

■優先度：低■
PreFormatContribution：他のコントリビューションがplugin.xmlを読む前に修正を加えることができる。
地域マップモード:
	＋広域マップゲームを読み込む→地域選択→個別ゲーム
	＋個別ゲームはマップの人口、産業、需要などと、路線図を広域マップからアクセスできるように保存する。
	＋個別マップでマップ外に接続すると、隣の個別マップとの接続口になる。
	＋上記で、隣の個別マップでは、接続口からマップ内の路線や駅と繋がないと、機能しない。
	
画像
オーバーライド【高次元】
+早朝：午前：午後：夕方：夜：深夜
+曜日指定（土日祝日)
+日付（毎年）指定（毎月指定）
+春：夏：秋：冬
+月指定
レイヤー【中次元】
アニメーション【低次元】
+フレーム番号、ウェイト
